
Mysz_Akcelerometryczna.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd4  08004cd4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cdc  08004cdc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cdc  08004cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce0  08004ce0  00014ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  08004d4c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08004d4c  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d6f9  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e04  00000000  00000000  0002d7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  0002f5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000981  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020eb2  00000000  00000000  00030ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f777  00000000  00000000  00051a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3a00  00000000  00000000  000611ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a28  00000000  00000000  00124bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001285f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b7c 	.word	0x08004b7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004b7c 	.word	0x08004b7c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b0a      	cmp	r3, #10
 8000578:	d109      	bne.n	800058e <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 800057a:	230d      	movs	r3, #13
 800057c:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 800057e:	f107 010f 	add.w	r1, r7, #15
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	2201      	movs	r2, #1
 8000588:	4807      	ldr	r0, [pc, #28]	; (80005a8 <__io_putchar+0x3c>)
 800058a:	f002 fead 	bl	80032e8 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800058e:	1d39      	adds	r1, r7, #4
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
 8000594:	2201      	movs	r2, #1
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <__io_putchar+0x3c>)
 8000598:	f002 fea6 	bl	80032e8 <HAL_UART_Transmit>
    return 1;
 800059c:	2301      	movs	r3, #1
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000d8 	.word	0x200000d8

080005ac <mpu_9250_read_reg>:

uint8_t mpu_9250_read_reg(uint8_t reg)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af04      	add	r7, sp, #16
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	HAL_I2C_Mem_Read(&hi2c1, MPU_9250_ADDR, reg, 1, &value, sizeof(value), HAL_MAX_DELAY);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	9302      	str	r3, [sp, #8]
 80005c0:	2301      	movs	r3, #1
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	f107 030f 	add.w	r3, r7, #15
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	21d0      	movs	r1, #208	; 0xd0
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <mpu_9250_read_reg+0x34>)
 80005d0:	f001 f84e 	bl	8001670 <HAL_I2C_Mem_Read>

	return value;
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000084 	.word	0x20000084

080005e4 <mpu_9250_write_reg>:

void mpu_9250_write_reg(uint8_t reg, uint8_t value)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af04      	add	r7, sp, #16
 80005ea:	4603      	mov	r3, r0
 80005ec:	460a      	mov	r2, r1
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	4613      	mov	r3, r2
 80005f2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU_9250_ADDR, reg, 1, &value, sizeof(value), HAL_MAX_DELAY);
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295
 80005fc:	9302      	str	r3, [sp, #8]
 80005fe:	2301      	movs	r3, #1
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	1dbb      	adds	r3, r7, #6
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	21d0      	movs	r1, #208	; 0xd0
 800060a:	4803      	ldr	r0, [pc, #12]	; (8000618 <mpu_9250_write_reg+0x34>)
 800060c:	f000 ff1c 	bl	8001448 <HAL_I2C_Mem_Write>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000084 	.word	0x20000084

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fb8c 	bl	8000d3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f8c1 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f981 	bl	8000930 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062e:	f000 f94f 	bl	80008d0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000632:	f000 f90d 	bl	8000850 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //Counter setup
  uint16_t counter = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	81fb      	strh	r3, [r7, #14]

  //Accelerometer partial values
  uint8_t Mpu_9250_Accel_Xout_H_Value = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	737b      	strb	r3, [r7, #13]
  uint8_t Mpu_9250_Accel_Xout_L_Value = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	733b      	strb	r3, [r7, #12]
  uint8_t Mpu_9250_Accel_Yout_H_Value = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	72fb      	strb	r3, [r7, #11]
  uint8_t Mpu_9250_Accel_Yout_L_Value = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	72bb      	strb	r3, [r7, #10]
  uint8_t Mpu_9250_Accel_Zout_H_Value = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	727b      	strb	r3, [r7, #9]
  uint8_t Mpu_9250_Accel_Zout_L_Value = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	723b      	strb	r3, [r7, #8]

  //Accelerometer full values
  int16_t Mpu_9250_Accel_Xout_Value = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	80fb      	strh	r3, [r7, #6]
  int16_t Mpu_9250_Accel_Yout_Value = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	80bb      	strh	r3, [r7, #4]
  int16_t Mpu_9250_Accel_Zout_Value = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	807b      	strh	r3, [r7, #2]

  //Baud rate setup for UART BT401
  HAL_UART_Transmit(&huart2, (uint8_t*)"AT+CT05\r\n", 11, HAL_MAX_DELAY);
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	220b      	movs	r2, #11
 8000664:	4949      	ldr	r1, [pc, #292]	; (800078c <main+0x170>)
 8000666:	484a      	ldr	r0, [pc, #296]	; (8000790 <main+0x174>)
 8000668:	f002 fe3e 	bl	80032e8 <HAL_UART_Transmit>

  //Startup connection verification
  uint8_t who_am_i = mpu_9250_read_reg(MPU_9250_WHO_AM_I);
 800066c:	2075      	movs	r0, #117	; 0x75
 800066e:	f7ff ff9d 	bl	80005ac <mpu_9250_read_reg>
 8000672:	4603      	mov	r3, r0
 8000674:	707b      	strb	r3, [r7, #1]

  if (who_am_i != 0) {
 8000676:	787b      	ldrb	r3, [r7, #1]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d003      	beq.n	8000684 <main+0x68>
	  printf("Found: MPU-9250\n");
 800067c:	4845      	ldr	r0, [pc, #276]	; (8000794 <main+0x178>)
 800067e:	f003 fc15 	bl	8003eac <puts>
 8000682:	e004      	b.n	800068e <main+0x72>
  }
  else
  {
	  printf("Error: (0x%02X)\n", who_am_i);
 8000684:	787b      	ldrb	r3, [r7, #1]
 8000686:	4619      	mov	r1, r3
 8000688:	4843      	ldr	r0, [pc, #268]	; (8000798 <main+0x17c>)
 800068a:	f003 fba9 	bl	8003de0 <iprintf>
  }

  //Reset accelerometer registers
  mpu_9250_write_reg(0x77, 0x00);
 800068e:	2100      	movs	r1, #0
 8000690:	2077      	movs	r0, #119	; 0x77
 8000692:	f7ff ffa7 	bl	80005e4 <mpu_9250_write_reg>
  mpu_9250_write_reg(0x78, 0x00);
 8000696:	2100      	movs	r1, #0
 8000698:	2078      	movs	r0, #120	; 0x78
 800069a:	f7ff ffa3 	bl	80005e4 <mpu_9250_write_reg>
  mpu_9250_write_reg(0x7A, 0x00);
 800069e:	2100      	movs	r1, #0
 80006a0:	207a      	movs	r0, #122	; 0x7a
 80006a2:	f7ff ff9f 	bl	80005e4 <mpu_9250_write_reg>
  mpu_9250_write_reg(0x7B, 0x00);
 80006a6:	2100      	movs	r1, #0
 80006a8:	207b      	movs	r0, #123	; 0x7b
 80006aa:	f7ff ff9b 	bl	80005e4 <mpu_9250_write_reg>
  mpu_9250_write_reg(0x7D, 0x00);
 80006ae:	2100      	movs	r1, #0
 80006b0:	207d      	movs	r0, #125	; 0x7d
 80006b2:	f7ff ff97 	bl	80005e4 <mpu_9250_write_reg>
  mpu_9250_write_reg(0x7E, 0x00);
 80006b6:	2100      	movs	r1, #0
 80006b8:	207e      	movs	r0, #126	; 0x7e
 80006ba:	f7ff ff93 	bl	80005e4 <mpu_9250_write_reg>

  //Accelerometer configuration change
  uint8_t Configuration_Data_MPU_9250 = mpu_9250_read_reg(0x1C);
 80006be:	201c      	movs	r0, #28
 80006c0:	f7ff ff74 	bl	80005ac <mpu_9250_read_reg>
 80006c4:	4603      	mov	r3, r0
 80006c6:	703b      	strb	r3, [r7, #0]
  Configuration_Data_MPU_9250 |= (0 << 3);
  Configuration_Data_MPU_9250 |= (0 << 4);
  Configuration_Data_MPU_9250 |= (1 << 5);
 80006c8:	783b      	ldrb	r3, [r7, #0]
 80006ca:	f043 0320 	orr.w	r3, r3, #32
 80006ce:	703b      	strb	r3, [r7, #0]
  Configuration_Data_MPU_9250 |= (1 << 6);
 80006d0:	783b      	ldrb	r3, [r7, #0]
 80006d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d6:	703b      	strb	r3, [r7, #0]
  Configuration_Data_MPU_9250 |= (1 << 7);
 80006d8:	783b      	ldrb	r3, [r7, #0]
 80006da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006de:	703b      	strb	r3, [r7, #0]
  mpu_9250_write_reg(0x1C, Configuration_Data_MPU_9250);
 80006e0:	783b      	ldrb	r3, [r7, #0]
 80006e2:	4619      	mov	r1, r3
 80006e4:	201c      	movs	r0, #28
 80006e6:	f7ff ff7d 	bl	80005e4 <mpu_9250_write_reg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Accelerometer data reading
	  Mpu_9250_Accel_Xout_H_Value = mpu_9250_read_reg(MPU_9250_ACCEL_XOUT_H);
 80006ea:	203b      	movs	r0, #59	; 0x3b
 80006ec:	f7ff ff5e 	bl	80005ac <mpu_9250_read_reg>
 80006f0:	4603      	mov	r3, r0
 80006f2:	737b      	strb	r3, [r7, #13]
	  Mpu_9250_Accel_Xout_L_Value = mpu_9250_read_reg(MPU_9250_ACCEL_XOUT_L);
 80006f4:	203c      	movs	r0, #60	; 0x3c
 80006f6:	f7ff ff59 	bl	80005ac <mpu_9250_read_reg>
 80006fa:	4603      	mov	r3, r0
 80006fc:	733b      	strb	r3, [r7, #12]
	  Mpu_9250_Accel_Yout_H_Value = mpu_9250_read_reg(MPU_9250_ACCEL_YOUT_H);
 80006fe:	203d      	movs	r0, #61	; 0x3d
 8000700:	f7ff ff54 	bl	80005ac <mpu_9250_read_reg>
 8000704:	4603      	mov	r3, r0
 8000706:	72fb      	strb	r3, [r7, #11]
	  Mpu_9250_Accel_Yout_L_Value = mpu_9250_read_reg(MPU_9250_ACCEL_YOUT_L);
 8000708:	203e      	movs	r0, #62	; 0x3e
 800070a:	f7ff ff4f 	bl	80005ac <mpu_9250_read_reg>
 800070e:	4603      	mov	r3, r0
 8000710:	72bb      	strb	r3, [r7, #10]
	  Mpu_9250_Accel_Zout_H_Value = mpu_9250_read_reg(MPU_9250_ACCEL_ZOUT_H);
 8000712:	203f      	movs	r0, #63	; 0x3f
 8000714:	f7ff ff4a 	bl	80005ac <mpu_9250_read_reg>
 8000718:	4603      	mov	r3, r0
 800071a:	727b      	strb	r3, [r7, #9]
	  Mpu_9250_Accel_Zout_L_Value = mpu_9250_read_reg(MPU_9250_ACCEL_ZOUT_L);
 800071c:	2040      	movs	r0, #64	; 0x40
 800071e:	f7ff ff45 	bl	80005ac <mpu_9250_read_reg>
 8000722:	4603      	mov	r3, r0
 8000724:	723b      	strb	r3, [r7, #8]

	  //Accelerometer full values completing
	  Mpu_9250_Accel_Xout_Value = ((Mpu_9250_Accel_Xout_H_Value << 8)|Mpu_9250_Accel_Xout_L_Value);
 8000726:	7b7b      	ldrb	r3, [r7, #13]
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	b21a      	sxth	r2, r3
 800072c:	7b3b      	ldrb	r3, [r7, #12]
 800072e:	b21b      	sxth	r3, r3
 8000730:	4313      	orrs	r3, r2
 8000732:	80fb      	strh	r3, [r7, #6]
	  Mpu_9250_Accel_Yout_Value = ((Mpu_9250_Accel_Yout_H_Value << 8)|Mpu_9250_Accel_Yout_L_Value);
 8000734:	7afb      	ldrb	r3, [r7, #11]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	b21a      	sxth	r2, r3
 800073a:	7abb      	ldrb	r3, [r7, #10]
 800073c:	b21b      	sxth	r3, r3
 800073e:	4313      	orrs	r3, r2
 8000740:	80bb      	strh	r3, [r7, #4]
	  Mpu_9250_Accel_Zout_Value = ((Mpu_9250_Accel_Zout_H_Value << 8)|Mpu_9250_Accel_Zout_L_Value);
 8000742:	7a7b      	ldrb	r3, [r7, #9]
 8000744:	021b      	lsls	r3, r3, #8
 8000746:	b21a      	sxth	r2, r3
 8000748:	7a3b      	ldrb	r3, [r7, #8]
 800074a:	b21b      	sxth	r3, r3
 800074c:	4313      	orrs	r3, r2
 800074e:	807b      	strh	r3, [r7, #2]

	  //Accelerometer data sending by BT401
	  printf("%d. MPU-9250 accelerometer reading:\n", counter);
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	4619      	mov	r1, r3
 8000754:	4811      	ldr	r0, [pc, #68]	; (800079c <main+0x180>)
 8000756:	f003 fb43 	bl	8003de0 <iprintf>
	  printf("	Mpu_9250_Accel_Xout_Value = %d\n", Mpu_9250_Accel_Xout_Value);
 800075a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800075e:	4619      	mov	r1, r3
 8000760:	480f      	ldr	r0, [pc, #60]	; (80007a0 <main+0x184>)
 8000762:	f003 fb3d 	bl	8003de0 <iprintf>
	  printf("	Mpu_9250_Accel_Yout_Value = %d\n", Mpu_9250_Accel_Yout_Value);
 8000766:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800076a:	4619      	mov	r1, r3
 800076c:	480d      	ldr	r0, [pc, #52]	; (80007a4 <main+0x188>)
 800076e:	f003 fb37 	bl	8003de0 <iprintf>
	  printf("	Mpu_9250_Accel_Zout_Value = %d\n\n", Mpu_9250_Accel_Zout_Value);
 8000772:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000776:	4619      	mov	r1, r3
 8000778:	480b      	ldr	r0, [pc, #44]	; (80007a8 <main+0x18c>)
 800077a:	f003 fb31 	bl	8003de0 <iprintf>

	  //Delay and counter update
	  HAL_Delay(PRINTF_TIME_DELAY);
 800077e:	2064      	movs	r0, #100	; 0x64
 8000780:	f000 fb52 	bl	8000e28 <HAL_Delay>
	  counter++;
 8000784:	89fb      	ldrh	r3, [r7, #14]
 8000786:	3301      	adds	r3, #1
 8000788:	81fb      	strh	r3, [r7, #14]
	  Mpu_9250_Accel_Xout_H_Value = mpu_9250_read_reg(MPU_9250_ACCEL_XOUT_H);
 800078a:	e7ae      	b.n	80006ea <main+0xce>
 800078c:	08004b94 	.word	0x08004b94
 8000790:	200000d8 	.word	0x200000d8
 8000794:	08004ba0 	.word	0x08004ba0
 8000798:	08004bb0 	.word	0x08004bb0
 800079c:	08004bc4 	.word	0x08004bc4
 80007a0:	08004bec 	.word	0x08004bec
 80007a4:	08004c10 	.word	0x08004c10
 80007a8:	08004c34 	.word	0x08004c34

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b096      	sub	sp, #88	; 0x58
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2244      	movs	r2, #68	; 0x44
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f003 fc56 	bl	800406c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	463b      	mov	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007d2:	f001 fbc5 	bl	8001f60 <HAL_PWREx_ControlVoltageScaling>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007dc:	f000 f8cc 	bl	8000978 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007e0:	2310      	movs	r3, #16
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007ec:	2360      	movs	r3, #96	; 0x60
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f0:	2302      	movs	r3, #2
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007f4:	2301      	movs	r3, #1
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80007fc:	2310      	movs	r3, #16
 80007fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000800:	2307      	movs	r3, #7
 8000802:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fbfb 	bl	800200c <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800081c:	f000 f8ac 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2303      	movs	r3, #3
 8000826:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000834:	463b      	mov	r3, r7
 8000836:	2101      	movs	r1, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fffb 	bl	8002834 <HAL_RCC_ClockConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000844:	f000 f898 	bl	8000978 <Error_Handler>
  }
}
 8000848:	bf00      	nop
 800084a:	3758      	adds	r7, #88	; 0x58
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_I2C1_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_I2C1_Init+0x74>)
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <MX_I2C1_Init+0x7c>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000868:	2201      	movs	r2, #1
 800086a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_I2C1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <MX_I2C1_Init+0x74>)
 800088c:	f000 fd40 	bl	8001310 <HAL_I2C_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000896:	f000 f86f 	bl	8000978 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <MX_I2C1_Init+0x74>)
 800089e:	f001 fab9 	bl	8001e14 <HAL_I2CEx_ConfigAnalogFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a8:	f000 f866 	bl	8000978 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_I2C1_Init+0x74>)
 80008b0:	f001 fafb 	bl	8001eaa <HAL_I2CEx_ConfigDigitalFilter>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 f85d 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000084 	.word	0x20000084
 80008c8:	40005400 	.word	0x40005400
 80008cc:	00707cbb 	.word	0x00707cbb

080008d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_USART2_UART_Init+0x58>)
 80008d6:	4a15      	ldr	r2, [pc, #84]	; (800092c <MX_USART2_UART_Init+0x5c>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_USART2_UART_Init+0x58>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_USART2_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_USART2_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_USART2_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_USART2_UART_Init+0x58>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_USART2_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_USART2_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_USART2_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_USART2_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_USART2_UART_Init+0x58>)
 8000914:	f002 fc9a 	bl	800324c <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 f82b 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200000d8 	.word	0x200000d8
 800092c:	40004400 	.word	0x40004400

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_GPIO_Init+0x44>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <MX_GPIO_Init+0x44>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_GPIO_Init+0x44>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_GPIO_Init+0x44>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <MX_GPIO_Init+0x44>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_GPIO_Init+0x44>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>
	...

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_MspInit+0x44>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098e:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <HAL_MspInit+0x44>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6613      	str	r3, [r2, #96]	; 0x60
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_MspInit+0x44>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_MspInit+0x44>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a6:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <HAL_MspInit+0x44>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	6593      	str	r3, [r2, #88]	; 0x58
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_MspInit+0x44>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000

080009cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b09e      	sub	sp, #120	; 0x78
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	2254      	movs	r2, #84	; 0x54
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f003 fb3d 	bl	800406c <memset>
  if(hi2c->Instance==I2C1)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a1f      	ldr	r2, [pc, #124]	; (8000a74 <HAL_I2C_MspInit+0xa8>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d137      	bne.n	8000a6c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009fc:	2340      	movs	r3, #64	; 0x40
 80009fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 f937 	bl	8002c7c <HAL_RCCEx_PeriphCLKConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a14:	f7ff ffb0 	bl	8000978 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_I2C_MspInit+0xac>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <HAL_I2C_MspInit+0xac>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_I2C_MspInit+0xac>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a34:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a36:	2312      	movs	r3, #18
 8000a38:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a42:	2304      	movs	r3, #4
 8000a44:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a50:	f000 faf4 	bl	800103c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_I2C_MspInit+0xac>)
 8000a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_I2C_MspInit+0xac>)
 8000a5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_I2C_MspInit+0xac>)
 8000a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a6c:	bf00      	nop
 8000a6e:	3778      	adds	r7, #120	; 0x78
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40005400 	.word	0x40005400
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09e      	sub	sp, #120	; 0x78
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	2254      	movs	r2, #84	; 0x54
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f003 fae5 	bl	800406c <memset>
  if(huart->Instance==USART2)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a1f      	ldr	r2, [pc, #124]	; (8000b24 <HAL_UART_MspInit+0xa8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d136      	bne.n	8000b1a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f002 f8df 	bl	8002c7c <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ac4:	f7ff ff58 	bl	8000978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <HAL_UART_MspInit+0xac>)
 8000aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000acc:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <HAL_UART_MspInit+0xac>)
 8000ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <HAL_UART_MspInit+0xac>)
 8000ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_UART_MspInit+0xac>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	4a10      	ldr	r2, [pc, #64]	; (8000b28 <HAL_UART_MspInit+0xac>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_UART_MspInit+0xac>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_3;
 8000af8:	230c      	movs	r3, #12
 8000afa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b10:	4619      	mov	r1, r3
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f000 fa91 	bl	800103c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b1a:	bf00      	nop
 8000b1c:	3778      	adds	r7, #120	; 0x78
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40004400 	.word	0x40004400
 8000b28:	40021000 	.word	0x40021000

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 f936 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e00a      	b.n	8000ba8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b92:	f3af 8000 	nop.w
 8000b96:	4601      	mov	r1, r0
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	60ba      	str	r2, [r7, #8]
 8000b9e:	b2ca      	uxtb	r2, r1
 8000ba0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbf0      	blt.n	8000b92 <_read+0x12>
  }

  return len;
 8000bb0:	687b      	ldr	r3, [r7, #4]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	60f8      	str	r0, [r7, #12]
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	e009      	b.n	8000be0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60ba      	str	r2, [r7, #8]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fcc9 	bl	800056c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbf1      	blt.n	8000bcc <_write+0x12>
  }
  return len;
 8000be8:	687b      	ldr	r3, [r7, #4]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_close>:

int _close(int file)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_isatty>:

int _isatty(int file)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c64:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <_sbrk+0x5c>)
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <_sbrk+0x60>)
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <_sbrk+0x64>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <_sbrk+0x68>)
 8000c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d207      	bcs.n	8000c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c8c:	f003 fa3c 	bl	8004108 <__errno>
 8000c90:	4603      	mov	r3, r0
 8000c92:	220c      	movs	r2, #12
 8000c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	e009      	b.n	8000cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <_sbrk+0x64>)
 8000cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20010000 	.word	0x20010000
 8000cbc:	00000400 	.word	0x00000400
 8000cc0:	20000160 	.word	0x20000160
 8000cc4:	200002b8 	.word	0x200002b8

08000cc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <SystemInit+0x20>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <SystemInit+0x20>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cf0:	f7ff ffea 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf6:	490d      	ldr	r1, [pc, #52]	; (8000d2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <LoopForever+0xe>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d0c:	4c0a      	ldr	r4, [pc, #40]	; (8000d38 <LoopForever+0x16>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f003 f9fb 	bl	8004114 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d1e:	f7ff fc7d 	bl	800061c <main>

08000d22 <LoopForever>:

LoopForever:
    b LoopForever
 8000d22:	e7fe      	b.n	8000d22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d24:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d30:	08004ce4 	.word	0x08004ce4
  ldr r2, =_sbss
 8000d34:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d38:	200002b4 	.word	0x200002b4

08000d3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC1_IRQHandler>

08000d3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 f943 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 f80e 	bl	8000d70 <HAL_InitTick>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	71fb      	strb	r3, [r7, #7]
 8000d5e:	e001      	b.n	8000d64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d60:	f7ff fe10 	bl	8000984 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d64:	79fb      	ldrb	r3, [r7, #7]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_InitTick+0x6c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d023      	beq.n	8000dcc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_InitTick+0x70>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_InitTick+0x6c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f941 	bl	8001022 <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10f      	bne.n	8000dc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d809      	bhi.n	8000dc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f000 f919 	bl	8000fea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db8:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <HAL_InitTick+0x74>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	e007      	b.n	8000dd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
 8000dc4:	e004      	b.n	8000dd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	73fb      	strb	r3, [r7, #15]
 8000dca:	e001      	b.n	8000dd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x20>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x24>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_IncTick+0x24>)
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000164 	.word	0x20000164

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_GetTick+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000164 	.word	0x20000164

08000e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e30:	f7ff ffee 	bl	8000e10 <HAL_GetTick>
 8000e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e40:	d005      	beq.n	8000e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_Delay+0x44>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4e:	bf00      	nop
 8000e50:	f7ff ffde 	bl	8000e10 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d8f7      	bhi.n	8000e50 <HAL_Delay+0x28>
  {
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff47 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff5c 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff8e 	bl	8000f28 <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffb0 	bl	8000f90 <SysTick_Config>
 8001030:	4603      	mov	r3, r0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104a:	e148      	b.n	80012de <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 813a 	beq.w	80012d8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b01      	cmp	r3, #1
 800106e:	d005      	beq.n	800107c <HAL_GPIO_Init+0x40>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d130      	bne.n	80010de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010b2:	2201      	movs	r2, #1
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	091b      	lsrs	r3, r3, #4
 80010c8:	f003 0201 	and.w	r2, r3, #1
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d017      	beq.n	800111a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d123      	bne.n	800116e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	6939      	ldr	r1, [r7, #16]
 800116a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0203 	and.w	r2, r3, #3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8094 	beq.w	80012d8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b0:	4b52      	ldr	r3, [pc, #328]	; (80012fc <HAL_GPIO_Init+0x2c0>)
 80011b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b4:	4a51      	ldr	r2, [pc, #324]	; (80012fc <HAL_GPIO_Init+0x2c0>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6613      	str	r3, [r2, #96]	; 0x60
 80011bc:	4b4f      	ldr	r3, [pc, #316]	; (80012fc <HAL_GPIO_Init+0x2c0>)
 80011be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011c8:	4a4d      	ldr	r2, [pc, #308]	; (8001300 <HAL_GPIO_Init+0x2c4>)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011f2:	d00d      	beq.n	8001210 <HAL_GPIO_Init+0x1d4>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a43      	ldr	r2, [pc, #268]	; (8001304 <HAL_GPIO_Init+0x2c8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d007      	beq.n	800120c <HAL_GPIO_Init+0x1d0>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a42      	ldr	r2, [pc, #264]	; (8001308 <HAL_GPIO_Init+0x2cc>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d101      	bne.n	8001208 <HAL_GPIO_Init+0x1cc>
 8001204:	2302      	movs	r3, #2
 8001206:	e004      	b.n	8001212 <HAL_GPIO_Init+0x1d6>
 8001208:	2307      	movs	r3, #7
 800120a:	e002      	b.n	8001212 <HAL_GPIO_Init+0x1d6>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <HAL_GPIO_Init+0x1d6>
 8001210:	2300      	movs	r3, #0
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	f002 0203 	and.w	r2, r2, #3
 8001218:	0092      	lsls	r2, r2, #2
 800121a:	4093      	lsls	r3, r2
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001222:	4937      	ldr	r1, [pc, #220]	; (8001300 <HAL_GPIO_Init+0x2c4>)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001230:	4b36      	ldr	r3, [pc, #216]	; (800130c <HAL_GPIO_Init+0x2d0>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001254:	4a2d      	ldr	r2, [pc, #180]	; (800130c <HAL_GPIO_Init+0x2d0>)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <HAL_GPIO_Init+0x2d0>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800127e:	4a23      	ldr	r2, [pc, #140]	; (800130c <HAL_GPIO_Init+0x2d0>)
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001284:	4b21      	ldr	r3, [pc, #132]	; (800130c <HAL_GPIO_Init+0x2d0>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012a8:	4a18      	ldr	r2, [pc, #96]	; (800130c <HAL_GPIO_Init+0x2d0>)
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <HAL_GPIO_Init+0x2d0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <HAL_GPIO_Init+0x2d0>)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f47f aeaf 	bne.w	800104c <HAL_GPIO_Init+0x10>
  }
}
 80012ee:	bf00      	nop
 80012f0:	bf00      	nop
 80012f2:	371c      	adds	r7, #28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010000 	.word	0x40010000
 8001304:	48000400 	.word	0x48000400
 8001308:	48000800 	.word	0x48000800
 800130c:	40010400 	.word	0x40010400

08001310 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e08d      	b.n	800143e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d106      	bne.n	800133c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fb48 	bl	80009cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2224      	movs	r2, #36	; 0x24
 8001340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001360:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001370:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d107      	bne.n	800138a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	e006      	b.n	8001398 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001396:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d108      	bne.n	80013b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	e007      	b.n	80013c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691a      	ldr	r2, [r3, #16]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69d9      	ldr	r1, [r3, #28]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1a      	ldr	r2, [r3, #32]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2220      	movs	r2, #32
 800142a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af02      	add	r7, sp, #8
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	4608      	mov	r0, r1
 8001452:	4611      	mov	r1, r2
 8001454:	461a      	mov	r2, r3
 8001456:	4603      	mov	r3, r0
 8001458:	817b      	strh	r3, [r7, #10]
 800145a:	460b      	mov	r3, r1
 800145c:	813b      	strh	r3, [r7, #8]
 800145e:	4613      	mov	r3, r2
 8001460:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b20      	cmp	r3, #32
 800146c:	f040 80f9 	bne.w	8001662 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <HAL_I2C_Mem_Write+0x34>
 8001476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001478:	2b00      	cmp	r3, #0
 800147a:	d105      	bne.n	8001488 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001482:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0ed      	b.n	8001664 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800148e:	2b01      	cmp	r3, #1
 8001490:	d101      	bne.n	8001496 <HAL_I2C_Mem_Write+0x4e>
 8001492:	2302      	movs	r3, #2
 8001494:	e0e6      	b.n	8001664 <HAL_I2C_Mem_Write+0x21c>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800149e:	f7ff fcb7 	bl	8000e10 <HAL_GetTick>
 80014a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2319      	movs	r3, #25
 80014aa:	2201      	movs	r2, #1
 80014ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 fac3 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0d1      	b.n	8001664 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2221      	movs	r2, #33	; 0x21
 80014c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2240      	movs	r2, #64	; 0x40
 80014cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a3a      	ldr	r2, [r7, #32]
 80014da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014e8:	88f8      	ldrh	r0, [r7, #6]
 80014ea:	893a      	ldrh	r2, [r7, #8]
 80014ec:	8979      	ldrh	r1, [r7, #10]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	4603      	mov	r3, r0
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f000 f9d3 	bl	80018a4 <I2C_RequestMemoryWrite>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d005      	beq.n	8001510 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0a9      	b.n	8001664 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001514:	b29b      	uxth	r3, r3
 8001516:	2bff      	cmp	r3, #255	; 0xff
 8001518:	d90e      	bls.n	8001538 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	22ff      	movs	r2, #255	; 0xff
 800151e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001524:	b2da      	uxtb	r2, r3
 8001526:	8979      	ldrh	r1, [r7, #10]
 8001528:	2300      	movs	r3, #0
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 fc3d 	bl	8001db0 <I2C_TransferConfig>
 8001536:	e00f      	b.n	8001558 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800153c:	b29a      	uxth	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001546:	b2da      	uxtb	r2, r3
 8001548:	8979      	ldrh	r1, [r7, #10]
 800154a:	2300      	movs	r3, #0
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 fc2c 	bl	8001db0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f000 fabc 	bl	8001ada <I2C_WaitOnTXISFlagUntilTimeout>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e07b      	b.n	8001664 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	781a      	ldrb	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001586:	b29b      	uxth	r3, r3
 8001588:	3b01      	subs	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001594:	3b01      	subs	r3, #1
 8001596:	b29a      	uxth	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d034      	beq.n	8001610 <HAL_I2C_Mem_Write+0x1c8>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d130      	bne.n	8001610 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b4:	2200      	movs	r2, #0
 80015b6:	2180      	movs	r1, #128	; 0x80
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 fa3f 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e04d      	b.n	8001664 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	2bff      	cmp	r3, #255	; 0xff
 80015d0:	d90e      	bls.n	80015f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	22ff      	movs	r2, #255	; 0xff
 80015d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	8979      	ldrh	r1, [r7, #10]
 80015e0:	2300      	movs	r3, #0
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 fbe1 	bl	8001db0 <I2C_TransferConfig>
 80015ee:	e00f      	b.n	8001610 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	8979      	ldrh	r1, [r7, #10]
 8001602:	2300      	movs	r3, #0
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 fbd0 	bl	8001db0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001614:	b29b      	uxth	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d19e      	bne.n	8001558 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 faa2 	bl	8001b68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e01a      	b.n	8001664 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2220      	movs	r2, #32
 8001634:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_I2C_Mem_Write+0x224>)
 8001642:	400b      	ands	r3, r1
 8001644:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2220      	movs	r2, #32
 800164a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001662:	2302      	movs	r3, #2
  }
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	fe00e800 	.word	0xfe00e800

08001670 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af02      	add	r7, sp, #8
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	4608      	mov	r0, r1
 800167a:	4611      	mov	r1, r2
 800167c:	461a      	mov	r2, r3
 800167e:	4603      	mov	r3, r0
 8001680:	817b      	strh	r3, [r7, #10]
 8001682:	460b      	mov	r3, r1
 8001684:	813b      	strh	r3, [r7, #8]
 8001686:	4613      	mov	r3, r2
 8001688:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b20      	cmp	r3, #32
 8001694:	f040 80fd 	bne.w	8001892 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <HAL_I2C_Mem_Read+0x34>
 800169e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d105      	bne.n	80016b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0f1      	b.n	8001894 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_I2C_Mem_Read+0x4e>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e0ea      	b.n	8001894 <HAL_I2C_Mem_Read+0x224>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016c6:	f7ff fba3 	bl	8000e10 <HAL_GetTick>
 80016ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2319      	movs	r3, #25
 80016d2:	2201      	movs	r2, #1
 80016d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 f9af 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0d5      	b.n	8001894 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2222      	movs	r2, #34	; 0x22
 80016ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2240      	movs	r2, #64	; 0x40
 80016f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6a3a      	ldr	r2, [r7, #32]
 8001702:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001708:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001710:	88f8      	ldrh	r0, [r7, #6]
 8001712:	893a      	ldrh	r2, [r7, #8]
 8001714:	8979      	ldrh	r1, [r7, #10]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	4603      	mov	r3, r0
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 f913 	bl	800194c <I2C_RequestMemoryRead>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0ad      	b.n	8001894 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173c:	b29b      	uxth	r3, r3
 800173e:	2bff      	cmp	r3, #255	; 0xff
 8001740:	d90e      	bls.n	8001760 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	22ff      	movs	r2, #255	; 0xff
 8001746:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174c:	b2da      	uxtb	r2, r3
 800174e:	8979      	ldrh	r1, [r7, #10]
 8001750:	4b52      	ldr	r3, [pc, #328]	; (800189c <HAL_I2C_Mem_Read+0x22c>)
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 fb29 	bl	8001db0 <I2C_TransferConfig>
 800175e:	e00f      	b.n	8001780 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001764:	b29a      	uxth	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176e:	b2da      	uxtb	r2, r3
 8001770:	8979      	ldrh	r1, [r7, #10]
 8001772:	4b4a      	ldr	r3, [pc, #296]	; (800189c <HAL_I2C_Mem_Read+0x22c>)
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 fb18 	bl	8001db0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001786:	2200      	movs	r2, #0
 8001788:	2104      	movs	r1, #4
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 f956 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e07c      	b.n	8001894 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d034      	beq.n	8001840 <HAL_I2C_Mem_Read+0x1d0>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d130      	bne.n	8001840 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e4:	2200      	movs	r2, #0
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 f927 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e04d      	b.n	8001894 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	2bff      	cmp	r3, #255	; 0xff
 8001800:	d90e      	bls.n	8001820 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	22ff      	movs	r2, #255	; 0xff
 8001806:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180c:	b2da      	uxtb	r2, r3
 800180e:	8979      	ldrh	r1, [r7, #10]
 8001810:	2300      	movs	r3, #0
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 fac9 	bl	8001db0 <I2C_TransferConfig>
 800181e:	e00f      	b.n	8001840 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001824:	b29a      	uxth	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182e:	b2da      	uxtb	r2, r3
 8001830:	8979      	ldrh	r1, [r7, #10]
 8001832:	2300      	movs	r3, #0
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 fab8 	bl	8001db0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001844:	b29b      	uxth	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d19a      	bne.n	8001780 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f98a 	bl	8001b68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e01a      	b.n	8001894 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2220      	movs	r2, #32
 8001864:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6859      	ldr	r1, [r3, #4]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_I2C_Mem_Read+0x230>)
 8001872:	400b      	ands	r3, r1
 8001874:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2220      	movs	r2, #32
 800187a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001892:	2302      	movs	r3, #2
  }
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	80002400 	.word	0x80002400
 80018a0:	fe00e800 	.word	0xfe00e800

080018a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	4608      	mov	r0, r1
 80018ae:	4611      	mov	r1, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	4603      	mov	r3, r0
 80018b4:	817b      	strh	r3, [r7, #10]
 80018b6:	460b      	mov	r3, r1
 80018b8:	813b      	strh	r3, [r7, #8]
 80018ba:	4613      	mov	r3, r2
 80018bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	8979      	ldrh	r1, [r7, #10]
 80018c4:	4b20      	ldr	r3, [pc, #128]	; (8001948 <I2C_RequestMemoryWrite+0xa4>)
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 fa6f 	bl	8001db0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	69b9      	ldr	r1, [r7, #24]
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 f8ff 	bl	8001ada <I2C_WaitOnTXISFlagUntilTimeout>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e02c      	b.n	8001940 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d105      	bne.n	80018f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018ec:	893b      	ldrh	r3, [r7, #8]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
 80018f6:	e015      	b.n	8001924 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80018f8:	893b      	ldrh	r3, [r7, #8]
 80018fa:	0a1b      	lsrs	r3, r3, #8
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	69b9      	ldr	r1, [r7, #24]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f8e5 	bl	8001ada <I2C_WaitOnTXISFlagUntilTimeout>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e012      	b.n	8001940 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800191a:	893b      	ldrh	r3, [r7, #8]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2200      	movs	r2, #0
 800192c:	2180      	movs	r1, #128	; 0x80
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 f884 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	80002000 	.word	0x80002000

0800194c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af02      	add	r7, sp, #8
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	4608      	mov	r0, r1
 8001956:	4611      	mov	r1, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4603      	mov	r3, r0
 800195c:	817b      	strh	r3, [r7, #10]
 800195e:	460b      	mov	r3, r1
 8001960:	813b      	strh	r3, [r7, #8]
 8001962:	4613      	mov	r3, r2
 8001964:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	8979      	ldrh	r1, [r7, #10]
 800196c:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <I2C_RequestMemoryRead+0xa4>)
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2300      	movs	r3, #0
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 fa1c 	bl	8001db0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	69b9      	ldr	r1, [r7, #24]
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 f8ac 	bl	8001ada <I2C_WaitOnTXISFlagUntilTimeout>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e02c      	b.n	80019e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d105      	bne.n	800199e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001992:	893b      	ldrh	r3, [r7, #8]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	629a      	str	r2, [r3, #40]	; 0x28
 800199c:	e015      	b.n	80019ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800199e:	893b      	ldrh	r3, [r7, #8]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	69b9      	ldr	r1, [r7, #24]
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f892 	bl	8001ada <I2C_WaitOnTXISFlagUntilTimeout>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e012      	b.n	80019e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019c0:	893b      	ldrh	r3, [r7, #8]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	2200      	movs	r2, #0
 80019d2:	2140      	movs	r1, #64	; 0x40
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 f831 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	80002000 	.word	0x80002000

080019f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d103      	bne.n	8001a12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d007      	beq.n	8001a30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699a      	ldr	r2, [r3, #24]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	619a      	str	r2, [r3, #24]
  }
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a4c:	e031      	b.n	8001ab2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d02d      	beq.n	8001ab2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a56:	f7ff f9db 	bl	8000e10 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d302      	bcc.n	8001a6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d122      	bne.n	8001ab2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699a      	ldr	r2, [r3, #24]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	4013      	ands	r3, r2
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2301      	moveq	r3, #1
 8001a7e:	2300      	movne	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d113      	bne.n	8001ab2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f043 0220 	orr.w	r2, r3, #32
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699a      	ldr	r2, [r3, #24]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	4013      	ands	r3, r2
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	bf0c      	ite	eq
 8001ac2:	2301      	moveq	r3, #1
 8001ac4:	2300      	movne	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d0be      	beq.n	8001a4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b084      	sub	sp, #16
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ae6:	e033      	b.n	8001b50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	68b9      	ldr	r1, [r7, #8]
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 f87f 	bl	8001bf0 <I2C_IsErrorOccurred>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e031      	b.n	8001b60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b02:	d025      	beq.n	8001b50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b04:	f7ff f984 	bl	8000e10 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d302      	bcc.n	8001b1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d11a      	bne.n	8001b50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d013      	beq.n	8001b50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	f043 0220 	orr.w	r2, r3, #32
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e007      	b.n	8001b60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d1c4      	bne.n	8001ae8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b74:	e02f      	b.n	8001bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f838 	bl	8001bf0 <I2C_IsErrorOccurred>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e02d      	b.n	8001be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8a:	f7ff f941 	bl	8000e10 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d302      	bcc.n	8001ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11a      	bne.n	8001bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 0320 	and.w	r3, r3, #32
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	d013      	beq.n	8001bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f043 0220 	orr.w	r2, r3, #32
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e007      	b.n	8001be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0320 	and.w	r3, r3, #32
 8001be0:	2b20      	cmp	r3, #32
 8001be2:	d1c8      	bne.n	8001b76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d068      	beq.n	8001cee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2210      	movs	r2, #16
 8001c22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c24:	e049      	b.n	8001cba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2c:	d045      	beq.n	8001cba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c2e:	f7ff f8ef 	bl	8000e10 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d302      	bcc.n	8001c44 <I2C_IsErrorOccurred+0x54>
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d13a      	bne.n	8001cba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c66:	d121      	bne.n	8001cac <I2C_IsErrorOccurred+0xbc>
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c6e:	d01d      	beq.n	8001cac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001c70:	7cfb      	ldrb	r3, [r7, #19]
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	d01a      	beq.n	8001cac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c86:	f7ff f8c3 	bl	8000e10 <HAL_GetTick>
 8001c8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c8c:	e00e      	b.n	8001cac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c8e:	f7ff f8bf 	bl	8000e10 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b19      	cmp	r3, #25
 8001c9a:	d907      	bls.n	8001cac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	f043 0320 	orr.w	r3, r3, #32
 8001ca2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001caa:	e006      	b.n	8001cba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d1e9      	bne.n	8001c8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	d003      	beq.n	8001cd0 <I2C_IsErrorOccurred+0xe0>
 8001cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0aa      	beq.n	8001c26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d103      	bne.n	8001ce0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00b      	beq.n	8001d18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	f043 0308 	orr.w	r3, r3, #8
 8001d28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00b      	beq.n	8001d5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	f043 0302 	orr.w	r3, r3, #2
 8001d4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01c      	beq.n	8001d9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f7ff fe45 	bl	80019f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <I2C_IsErrorOccurred+0x1bc>)
 8001d76:	400b      	ands	r3, r1
 8001d78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3728      	adds	r7, #40	; 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	fe00e800 	.word	0xfe00e800

08001db0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	817b      	strh	r3, [r7, #10]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dc2:	897b      	ldrh	r3, [r7, #10]
 8001dc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dc8:	7a7b      	ldrb	r3, [r7, #9]
 8001dca:	041b      	lsls	r3, r3, #16
 8001dcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	0d5b      	lsrs	r3, r3, #21
 8001dea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <I2C_TransferConfig+0x60>)
 8001df0:	430b      	orrs	r3, r1
 8001df2:	43db      	mvns	r3, r3
 8001df4:	ea02 0103 	and.w	r1, r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e02:	bf00      	nop
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	03ff63ff 	.word	0x03ff63ff

08001e14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	d138      	bne.n	8001e9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e032      	b.n	8001e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2224      	movs	r2, #36	; 0x24
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6819      	ldr	r1, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e000      	b.n	8001e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e9c:	2302      	movs	r3, #2
  }
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b085      	sub	sp, #20
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d139      	bne.n	8001f34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e033      	b.n	8001f36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2224      	movs	r2, #36	; 0x24
 8001eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0201 	bic.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001efc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e000      	b.n	8001f36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f34:	2302      	movs	r3, #2
  }
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <HAL_PWREx_GetVoltageRange+0x18>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40007000 	.word	0x40007000

08001f60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f6e:	d130      	bne.n	8001fd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f70:	4b23      	ldr	r3, [pc, #140]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f7c:	d038      	beq.n	8001ff0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f86:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2232      	movs	r2, #50	; 0x32
 8001f94:	fb02 f303 	mul.w	r3, r2, r3
 8001f98:	4a1b      	ldr	r2, [pc, #108]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	0c9b      	lsrs	r3, r3, #18
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa4:	e002      	b.n	8001fac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb8:	d102      	bne.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f2      	bne.n	8001fa6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fcc:	d110      	bne.n	8001ff0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e00f      	b.n	8001ff2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fde:	d007      	beq.n	8001ff0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fe0:	4b07      	ldr	r3, [pc, #28]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fe8:	4a05      	ldr	r2, [pc, #20]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40007000 	.word	0x40007000
 8002004:	20000000 	.word	0x20000000
 8002008:	431bde83 	.word	0x431bde83

0800200c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d102      	bne.n	8002020 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	f000 bc02 	b.w	8002824 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002020:	4b96      	ldr	r3, [pc, #600]	; (800227c <HAL_RCC_OscConfig+0x270>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800202a:	4b94      	ldr	r3, [pc, #592]	; (800227c <HAL_RCC_OscConfig+0x270>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80e4 	beq.w	800220a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <HAL_RCC_OscConfig+0x4c>
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	f040 808b 	bne.w	8002166 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b01      	cmp	r3, #1
 8002054:	f040 8087 	bne.w	8002166 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002058:	4b88      	ldr	r3, [pc, #544]	; (800227c <HAL_RCC_OscConfig+0x270>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_OscConfig+0x64>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e3d9      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1a      	ldr	r2, [r3, #32]
 8002074:	4b81      	ldr	r3, [pc, #516]	; (800227c <HAL_RCC_OscConfig+0x270>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d004      	beq.n	800208a <HAL_RCC_OscConfig+0x7e>
 8002080:	4b7e      	ldr	r3, [pc, #504]	; (800227c <HAL_RCC_OscConfig+0x270>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002088:	e005      	b.n	8002096 <HAL_RCC_OscConfig+0x8a>
 800208a:	4b7c      	ldr	r3, [pc, #496]	; (800227c <HAL_RCC_OscConfig+0x270>)
 800208c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002096:	4293      	cmp	r3, r2
 8002098:	d223      	bcs.n	80020e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fd8c 	bl	8002bbc <RCC_SetFlashLatencyFromMSIRange>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e3ba      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ae:	4b73      	ldr	r3, [pc, #460]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a72      	ldr	r2, [pc, #456]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b70      	ldr	r3, [pc, #448]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	496d      	ldr	r1, [pc, #436]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020cc:	4b6b      	ldr	r3, [pc, #428]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	4968      	ldr	r1, [pc, #416]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
 80020e0:	e025      	b.n	800212e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e2:	4b66      	ldr	r3, [pc, #408]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a65      	ldr	r2, [pc, #404]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80020e8:	f043 0308 	orr.w	r3, r3, #8
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b63      	ldr	r3, [pc, #396]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4960      	ldr	r1, [pc, #384]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002100:	4b5e      	ldr	r3, [pc, #376]	; (800227c <HAL_RCC_OscConfig+0x270>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	495b      	ldr	r1, [pc, #364]	; (800227c <HAL_RCC_OscConfig+0x270>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4618      	mov	r0, r3
 8002120:	f000 fd4c 	bl	8002bbc <RCC_SetFlashLatencyFromMSIRange>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e37a      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800212e:	f000 fc81 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 8002132:	4602      	mov	r2, r0
 8002134:	4b51      	ldr	r3, [pc, #324]	; (800227c <HAL_RCC_OscConfig+0x270>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	4950      	ldr	r1, [pc, #320]	; (8002280 <HAL_RCC_OscConfig+0x274>)
 8002140:	5ccb      	ldrb	r3, [r1, r3]
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	fa22 f303 	lsr.w	r3, r2, r3
 800214a:	4a4e      	ldr	r2, [pc, #312]	; (8002284 <HAL_RCC_OscConfig+0x278>)
 800214c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800214e:	4b4e      	ldr	r3, [pc, #312]	; (8002288 <HAL_RCC_OscConfig+0x27c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fe0c 	bl	8000d70 <HAL_InitTick>
 8002158:	4603      	mov	r3, r0
 800215a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d052      	beq.n	8002208 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	e35e      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d032      	beq.n	80021d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800216e:	4b43      	ldr	r3, [pc, #268]	; (800227c <HAL_RCC_OscConfig+0x270>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a42      	ldr	r2, [pc, #264]	; (800227c <HAL_RCC_OscConfig+0x270>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800217a:	f7fe fe49 	bl	8000e10 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002182:	f7fe fe45 	bl	8000e10 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e347      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002194:	4b39      	ldr	r3, [pc, #228]	; (800227c <HAL_RCC_OscConfig+0x270>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021a0:	4b36      	ldr	r3, [pc, #216]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a35      	ldr	r2, [pc, #212]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80021a6:	f043 0308 	orr.w	r3, r3, #8
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b33      	ldr	r3, [pc, #204]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4930      	ldr	r1, [pc, #192]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021be:	4b2f      	ldr	r3, [pc, #188]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	492b      	ldr	r1, [pc, #172]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
 80021d2:	e01a      	b.n	800220a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021d4:	4b29      	ldr	r3, [pc, #164]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a28      	ldr	r2, [pc, #160]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80021da:	f023 0301 	bic.w	r3, r3, #1
 80021de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021e0:	f7fe fe16 	bl	8000e10 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021e8:	f7fe fe12 	bl	8000e10 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e314      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_RCC_OscConfig+0x270>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x1dc>
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d073      	beq.n	80022fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	2b08      	cmp	r3, #8
 800221a:	d005      	beq.n	8002228 <HAL_RCC_OscConfig+0x21c>
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2b0c      	cmp	r3, #12
 8002220:	d10e      	bne.n	8002240 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d10b      	bne.n	8002240 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	4b14      	ldr	r3, [pc, #80]	; (800227c <HAL_RCC_OscConfig+0x270>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d063      	beq.n	80022fc <HAL_RCC_OscConfig+0x2f0>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d15f      	bne.n	80022fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e2f1      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002248:	d106      	bne.n	8002258 <HAL_RCC_OscConfig+0x24c>
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_RCC_OscConfig+0x270>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a0b      	ldr	r2, [pc, #44]	; (800227c <HAL_RCC_OscConfig+0x270>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e025      	b.n	80022a4 <HAL_RCC_OscConfig+0x298>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002260:	d114      	bne.n	800228c <HAL_RCC_OscConfig+0x280>
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_OscConfig+0x270>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <HAL_RCC_OscConfig+0x270>)
 8002268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4b03      	ldr	r3, [pc, #12]	; (800227c <HAL_RCC_OscConfig+0x270>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a02      	ldr	r2, [pc, #8]	; (800227c <HAL_RCC_OscConfig+0x270>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e013      	b.n	80022a4 <HAL_RCC_OscConfig+0x298>
 800227c:	40021000 	.word	0x40021000
 8002280:	08004c58 	.word	0x08004c58
 8002284:	20000000 	.word	0x20000000
 8002288:	20000004 	.word	0x20000004
 800228c:	4ba0      	ldr	r3, [pc, #640]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a9f      	ldr	r2, [pc, #636]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 8002292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b9d      	ldr	r3, [pc, #628]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a9c      	ldr	r2, [pc, #624]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 800229e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe fdb0 	bl	8000e10 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b4:	f7fe fdac 	bl	8000e10 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b64      	cmp	r3, #100	; 0x64
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e2ae      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022c6:	4b92      	ldr	r3, [pc, #584]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x2a8>
 80022d2:	e014      	b.n	80022fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe fd9c 	bl	8000e10 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7fe fd98 	bl	8000e10 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e29a      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ee:	4b88      	ldr	r3, [pc, #544]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x2d0>
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d060      	beq.n	80023cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	2b04      	cmp	r3, #4
 800230e:	d005      	beq.n	800231c <HAL_RCC_OscConfig+0x310>
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2b0c      	cmp	r3, #12
 8002314:	d119      	bne.n	800234a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d116      	bne.n	800234a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800231c:	4b7c      	ldr	r3, [pc, #496]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_OscConfig+0x328>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e277      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002334:	4b76      	ldr	r3, [pc, #472]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	061b      	lsls	r3, r3, #24
 8002342:	4973      	ldr	r1, [pc, #460]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002348:	e040      	b.n	80023cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d023      	beq.n	800239a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002352:	4b6f      	ldr	r3, [pc, #444]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a6e      	ldr	r2, [pc, #440]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7fe fd57 	bl	8000e10 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002366:	f7fe fd53 	bl	8000e10 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e255      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002378:	4b65      	ldr	r3, [pc, #404]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	4b62      	ldr	r3, [pc, #392]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	061b      	lsls	r3, r3, #24
 8002392:	495f      	ldr	r1, [pc, #380]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
 8002398:	e018      	b.n	80023cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239a:	4b5d      	ldr	r3, [pc, #372]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a5c      	ldr	r2, [pc, #368]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 80023a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7fe fd33 	bl	8000e10 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ae:	f7fe fd2f 	bl	8000e10 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e231      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023c0:	4b53      	ldr	r3, [pc, #332]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d03c      	beq.n	8002452 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01c      	beq.n	800241a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e0:	4b4b      	ldr	r3, [pc, #300]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 80023e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023e6:	4a4a      	ldr	r2, [pc, #296]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f0:	f7fe fd0e 	bl	8000e10 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f8:	f7fe fd0a 	bl	8000e10 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e20c      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800240a:	4b41      	ldr	r3, [pc, #260]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 800240c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0ef      	beq.n	80023f8 <HAL_RCC_OscConfig+0x3ec>
 8002418:	e01b      	b.n	8002452 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241a:	4b3d      	ldr	r3, [pc, #244]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 800241c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002420:	4a3b      	ldr	r2, [pc, #236]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242a:	f7fe fcf1 	bl	8000e10 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002432:	f7fe fced 	bl	8000e10 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e1ef      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002444:	4b32      	ldr	r3, [pc, #200]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 8002446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1ef      	bne.n	8002432 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 80a6 	beq.w	80025ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002460:	2300      	movs	r3, #0
 8002462:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002464:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10d      	bne.n	800248c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	4a26      	ldr	r2, [pc, #152]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 8002476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247a:	6593      	str	r3, [r2, #88]	; 0x58
 800247c:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002488:	2301      	movs	r3, #1
 800248a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_RCC_OscConfig+0x508>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d118      	bne.n	80024ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002498:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <HAL_RCC_OscConfig+0x508>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <HAL_RCC_OscConfig+0x508>)
 800249e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a4:	f7fe fcb4 	bl	8000e10 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ac:	f7fe fcb0 	bl	8000e10 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e1b2      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_RCC_OscConfig+0x508>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d108      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4d8>
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 80024d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024e2:	e029      	b.n	8002538 <HAL_RCC_OscConfig+0x52c>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2b05      	cmp	r3, #5
 80024ea:	d115      	bne.n	8002518 <HAL_RCC_OscConfig+0x50c>
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	4a07      	ldr	r2, [pc, #28]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024fc:	4b04      	ldr	r3, [pc, #16]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	4a03      	ldr	r2, [pc, #12]	; (8002510 <HAL_RCC_OscConfig+0x504>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800250c:	e014      	b.n	8002538 <HAL_RCC_OscConfig+0x52c>
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
 8002514:	40007000 	.word	0x40007000
 8002518:	4b9a      	ldr	r3, [pc, #616]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	4a99      	ldr	r2, [pc, #612]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002528:	4b96      	ldr	r3, [pc, #600]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	4a95      	ldr	r2, [pc, #596]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 8002530:	f023 0304 	bic.w	r3, r3, #4
 8002534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d016      	beq.n	800256e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002540:	f7fe fc66 	bl	8000e10 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002546:	e00a      	b.n	800255e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002548:	f7fe fc62 	bl	8000e10 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	; 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e162      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255e:	4b89      	ldr	r3, [pc, #548]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 8002560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ed      	beq.n	8002548 <HAL_RCC_OscConfig+0x53c>
 800256c:	e015      	b.n	800259a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256e:	f7fe fc4f 	bl	8000e10 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe fc4b 	bl	8000e10 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e14b      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800258c:	4b7d      	ldr	r3, [pc, #500]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1ed      	bne.n	8002576 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800259a:	7ffb      	ldrb	r3, [r7, #31]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d105      	bne.n	80025ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a0:	4b78      	ldr	r3, [pc, #480]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	4a77      	ldr	r2, [pc, #476]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 80025a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d03c      	beq.n	8002632 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01c      	beq.n	80025fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025c0:	4b70      	ldr	r3, [pc, #448]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 80025c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025c6:	4a6f      	ldr	r2, [pc, #444]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d0:	f7fe fc1e 	bl	8000e10 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025d8:	f7fe fc1a 	bl	8000e10 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e11c      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ea:	4b66      	ldr	r3, [pc, #408]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 80025ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ef      	beq.n	80025d8 <HAL_RCC_OscConfig+0x5cc>
 80025f8:	e01b      	b.n	8002632 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025fa:	4b62      	ldr	r3, [pc, #392]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 80025fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002600:	4a60      	ldr	r2, [pc, #384]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 8002602:	f023 0301 	bic.w	r3, r3, #1
 8002606:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7fe fc01 	bl	8000e10 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002612:	f7fe fbfd 	bl	8000e10 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e0ff      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002624:	4b57      	ldr	r3, [pc, #348]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 8002626:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1ef      	bne.n	8002612 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80f3 	beq.w	8002822 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	2b02      	cmp	r3, #2
 8002642:	f040 80c9 	bne.w	80027d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002646:	4b4f      	ldr	r3, [pc, #316]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f003 0203 	and.w	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	429a      	cmp	r2, r3
 8002658:	d12c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	3b01      	subs	r3, #1
 8002666:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d123      	bne.n	80026b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002676:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d11b      	bne.n	80026b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002686:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002688:	429a      	cmp	r2, r3
 800268a:	d113      	bne.n	80026b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	3b01      	subs	r3, #1
 800269a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d109      	bne.n	80026b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	3b01      	subs	r3, #1
 80026ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d06b      	beq.n	800278c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2b0c      	cmp	r3, #12
 80026b8:	d062      	beq.n	8002780 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026ba:	4b32      	ldr	r3, [pc, #200]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e0ac      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026ca:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2d      	ldr	r2, [pc, #180]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 80026d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026d6:	f7fe fb9b 	bl	8000e10 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026de:	f7fe fb97 	bl	8000e10 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e099      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f0:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f0      	bne.n	80026de <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	4b21      	ldr	r3, [pc, #132]	; (8002788 <HAL_RCC_OscConfig+0x77c>)
 8002702:	4013      	ands	r3, r2
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800270c:	3a01      	subs	r2, #1
 800270e:	0112      	lsls	r2, r2, #4
 8002710:	4311      	orrs	r1, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002716:	0212      	lsls	r2, r2, #8
 8002718:	4311      	orrs	r1, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800271e:	0852      	lsrs	r2, r2, #1
 8002720:	3a01      	subs	r2, #1
 8002722:	0552      	lsls	r2, r2, #21
 8002724:	4311      	orrs	r1, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800272a:	0852      	lsrs	r2, r2, #1
 800272c:	3a01      	subs	r2, #1
 800272e:	0652      	lsls	r2, r2, #25
 8002730:	4311      	orrs	r1, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002736:	06d2      	lsls	r2, r2, #27
 8002738:	430a      	orrs	r2, r1
 800273a:	4912      	ldr	r1, [pc, #72]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 800273c:	4313      	orrs	r3, r2
 800273e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002740:	4b10      	ldr	r3, [pc, #64]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0f      	ldr	r2, [pc, #60]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 8002746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800274c:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a0c      	ldr	r2, [pc, #48]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 8002752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002756:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002758:	f7fe fb5a 	bl	8000e10 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe fb56 	bl	8000e10 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e058      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002772:	4b04      	ldr	r3, [pc, #16]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800277e:	e050      	b.n	8002822 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e04f      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
 8002784:	40021000 	.word	0x40021000
 8002788:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278c:	4b27      	ldr	r3, [pc, #156]	; (800282c <HAL_RCC_OscConfig+0x820>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d144      	bne.n	8002822 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCC_OscConfig+0x820>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a23      	ldr	r2, [pc, #140]	; (800282c <HAL_RCC_OscConfig+0x820>)
 800279e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <HAL_RCC_OscConfig+0x820>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a20      	ldr	r2, [pc, #128]	; (800282c <HAL_RCC_OscConfig+0x820>)
 80027aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027b0:	f7fe fb2e 	bl	8000e10 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fe fb2a 	bl	8000e10 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e02c      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <HAL_RCC_OscConfig+0x820>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x7ac>
 80027d6:	e024      	b.n	8002822 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d01f      	beq.n	800281e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027de:	4b13      	ldr	r3, [pc, #76]	; (800282c <HAL_RCC_OscConfig+0x820>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a12      	ldr	r2, [pc, #72]	; (800282c <HAL_RCC_OscConfig+0x820>)
 80027e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7fe fb11 	bl	8000e10 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f2:	f7fe fb0d 	bl	8000e10 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e00f      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002804:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_RCC_OscConfig+0x820>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_OscConfig+0x820>)
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	4905      	ldr	r1, [pc, #20]	; (800282c <HAL_RCC_OscConfig+0x820>)
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_RCC_OscConfig+0x824>)
 8002818:	4013      	ands	r3, r2
 800281a:	60cb      	str	r3, [r1, #12]
 800281c:	e001      	b.n	8002822 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	feeefffc 	.word	0xfeeefffc

08002834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0e7      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002848:	4b75      	ldr	r3, [pc, #468]	; (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d910      	bls.n	8002878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b72      	ldr	r3, [pc, #456]	; (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 0207 	bic.w	r2, r3, #7
 800285e:	4970      	ldr	r1, [pc, #448]	; (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b6e      	ldr	r3, [pc, #440]	; (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0cf      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d010      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	4b66      	ldr	r3, [pc, #408]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002890:	429a      	cmp	r2, r3
 8002892:	d908      	bls.n	80028a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b63      	ldr	r3, [pc, #396]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4960      	ldr	r1, [pc, #384]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d04c      	beq.n	800294c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ba:	4b5a      	ldr	r3, [pc, #360]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d121      	bne.n	800290a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0a6      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d2:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d115      	bne.n	800290a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e09a      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d107      	bne.n	80028fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ea:	4b4e      	ldr	r3, [pc, #312]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e08e      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028fa:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e086      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800290a:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f023 0203 	bic.w	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4943      	ldr	r1, [pc, #268]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 8002918:	4313      	orrs	r3, r2
 800291a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291c:	f7fe fa78 	bl	8000e10 <HAL_GetTick>
 8002920:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	e00a      	b.n	800293a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002924:	f7fe fa74 	bl	8000e10 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e06e      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	4b3a      	ldr	r3, [pc, #232]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 020c 	and.w	r2, r3, #12
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	429a      	cmp	r2, r3
 800294a:	d1eb      	bne.n	8002924 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d010      	beq.n	800297a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002964:	429a      	cmp	r2, r3
 8002966:	d208      	bcs.n	800297a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	4b2e      	ldr	r3, [pc, #184]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	492b      	ldr	r1, [pc, #172]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800297a:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d210      	bcs.n	80029aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 0207 	bic.w	r2, r3, #7
 8002990:	4923      	ldr	r1, [pc, #140]	; (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002998:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <HAL_RCC_ClockConfig+0x1ec>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d001      	beq.n	80029aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e036      	b.n	8002a18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b6:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	4918      	ldr	r1, [pc, #96]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d009      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d4:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4910      	ldr	r1, [pc, #64]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029e8:	f000 f824 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_RCC_ClockConfig+0x1f0>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	490b      	ldr	r1, [pc, #44]	; (8002a28 <HAL_RCC_ClockConfig+0x1f4>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
 8002a04:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_RCC_ClockConfig+0x1f8>)
 8002a06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x1fc>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe f9af 	bl	8000d70 <HAL_InitTick>
 8002a12:	4603      	mov	r3, r0
 8002a14:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a16:	7afb      	ldrb	r3, [r7, #11]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40021000 	.word	0x40021000
 8002a28:	08004c58 	.word	0x08004c58
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	20000004 	.word	0x20000004

08002a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a42:	4b3e      	ldr	r3, [pc, #248]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a4c:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x34>
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d121      	bne.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d11e      	bne.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a68:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a74:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7a:	0a1b      	lsrs	r3, r3, #8
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	e005      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a84:	4b2d      	ldr	r3, [pc, #180]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a90:	4a2b      	ldr	r2, [pc, #172]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10d      	bne.n	8002abc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d102      	bne.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	e004      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ab8:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d134      	bne.n	8002b2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d003      	beq.n	8002ada <HAL_RCC_GetSysClockFreq+0xa6>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d003      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ad8:	e005      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002adc:	617b      	str	r3, [r7, #20]
      break;
 8002ade:	e005      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ae0:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ae2:	617b      	str	r3, [r7, #20]
      break;
 8002ae4:	e002      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	617b      	str	r3, [r7, #20]
      break;
 8002aea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aec:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	3301      	adds	r3, #1
 8002af8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	fb03 f202 	mul.w	r2, r3, r2
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	0e5b      	lsrs	r3, r3, #25
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b2c:	69bb      	ldr	r3, [r7, #24]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3724      	adds	r7, #36	; 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	08004c70 	.word	0x08004c70
 8002b44:	00f42400 	.word	0x00f42400
 8002b48:	007a1200 	.word	0x007a1200

08002b4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b50:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b52:	681b      	ldr	r3, [r3, #0]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000000 	.word	0x20000000

08002b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b68:	f7ff fff0 	bl	8002b4c <HAL_RCC_GetHCLKFreq>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	0a1b      	lsrs	r3, r3, #8
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	4904      	ldr	r1, [pc, #16]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b7a:	5ccb      	ldrb	r3, [r1, r3]
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	08004c68 	.word	0x08004c68

08002b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b94:	f7ff ffda 	bl	8002b4c <HAL_RCC_GetHCLKFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	0adb      	lsrs	r3, r3, #11
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4904      	ldr	r1, [pc, #16]	; (8002bb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	08004c68 	.word	0x08004c68

08002bbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bc8:	4b2a      	ldr	r3, [pc, #168]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bd4:	f7ff f9b6 	bl	8001f44 <HAL_PWREx_GetVoltageRange>
 8002bd8:	6178      	str	r0, [r7, #20]
 8002bda:	e014      	b.n	8002c06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bdc:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	4a24      	ldr	r2, [pc, #144]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be6:	6593      	str	r3, [r2, #88]	; 0x58
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bf4:	f7ff f9a6 	bl	8001f44 <HAL_PWREx_GetVoltageRange>
 8002bf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c0c:	d10b      	bne.n	8002c26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b80      	cmp	r3, #128	; 0x80
 8002c12:	d919      	bls.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2ba0      	cmp	r3, #160	; 0xa0
 8002c18:	d902      	bls.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	e013      	b.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c20:	2301      	movs	r3, #1
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	e010      	b.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b80      	cmp	r3, #128	; 0x80
 8002c2a:	d902      	bls.n	8002c32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	e00a      	b.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d102      	bne.n	8002c3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c38:	2302      	movs	r3, #2
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	e004      	b.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b70      	cmp	r3, #112	; 0x70
 8002c42:	d101      	bne.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c44:	2301      	movs	r3, #1
 8002c46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f023 0207 	bic.w	r2, r3, #7
 8002c50:	4909      	ldr	r1, [pc, #36]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c58:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d001      	beq.n	8002c6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40022000 	.word	0x40022000

08002c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c84:	2300      	movs	r3, #0
 8002c86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c88:	2300      	movs	r3, #0
 8002c8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d031      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ca0:	d01a      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002ca2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ca6:	d814      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d009      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cb0:	d10f      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002cb2:	4b5d      	ldr	r3, [pc, #372]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	4a5c      	ldr	r2, [pc, #368]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cbc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cbe:	e00c      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f9ce 	bl	8003068 <RCCEx_PLLSAI1_Config>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cd0:	e003      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	74fb      	strb	r3, [r7, #19]
      break;
 8002cd6:	e000      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10b      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ce0:	4b51      	ldr	r3, [pc, #324]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	494e      	ldr	r1, [pc, #312]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cf6:	e001      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 809e 	beq.w	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d0e:	4b46      	ldr	r3, [pc, #280]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00d      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d24:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	4a3f      	ldr	r2, [pc, #252]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d30:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d40:	4b3a      	ldr	r3, [pc, #232]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a39      	ldr	r2, [pc, #228]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d4c:	f7fe f860 	bl	8000e10 <HAL_GetTick>
 8002d50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d52:	e009      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d54:	f7fe f85c 	bl	8000e10 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d902      	bls.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	74fb      	strb	r3, [r7, #19]
        break;
 8002d66:	e005      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d68:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0ef      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002d74:	7cfb      	ldrb	r3, [r7, #19]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d15a      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d7a:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01e      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d019      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002da2:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da8:	4a1f      	ldr	r2, [pc, #124]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db8:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002dc2:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d016      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe f81c 	bl	8000e10 <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dda:	e00b      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fe f818 	bl	8000e10 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d902      	bls.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	74fb      	strb	r3, [r7, #19]
            break;
 8002df2:	e006      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0ec      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002e02:	7cfb      	ldrb	r3, [r7, #19]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10b      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e08:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e16:	4904      	ldr	r1, [pc, #16]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e1e:	e009      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e20:	7cfb      	ldrb	r3, [r7, #19]
 8002e22:	74bb      	strb	r3, [r7, #18]
 8002e24:	e006      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e30:	7cfb      	ldrb	r3, [r7, #19]
 8002e32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e34:	7c7b      	ldrb	r3, [r7, #17]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d105      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3a:	4b8a      	ldr	r3, [pc, #552]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3e:	4a89      	ldr	r2, [pc, #548]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e52:	4b84      	ldr	r3, [pc, #528]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e58:	f023 0203 	bic.w	r2, r3, #3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	4980      	ldr	r1, [pc, #512]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e74:	4b7b      	ldr	r3, [pc, #492]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	f023 020c 	bic.w	r2, r3, #12
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	4978      	ldr	r1, [pc, #480]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e96:	4b73      	ldr	r3, [pc, #460]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	496f      	ldr	r1, [pc, #444]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eb8:	4b6a      	ldr	r3, [pc, #424]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec6:	4967      	ldr	r1, [pc, #412]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002eda:	4b62      	ldr	r3, [pc, #392]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	495e      	ldr	r1, [pc, #376]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002efc:	4b59      	ldr	r3, [pc, #356]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	4956      	ldr	r1, [pc, #344]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f1e:	4b51      	ldr	r3, [pc, #324]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	494d      	ldr	r1, [pc, #308]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d028      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f40:	4b48      	ldr	r3, [pc, #288]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4945      	ldr	r1, [pc, #276]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f5e:	d106      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f60:	4b40      	ldr	r3, [pc, #256]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4a3f      	ldr	r2, [pc, #252]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f6a:	60d3      	str	r3, [r2, #12]
 8002f6c:	e011      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f76:	d10c      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f872 	bl	8003068 <RCCEx_PLLSAI1_Config>
 8002f84:	4603      	mov	r3, r0
 8002f86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002f8e:	7cfb      	ldrb	r3, [r7, #19]
 8002f90:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d028      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f9e:	4b31      	ldr	r3, [pc, #196]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fac:	492d      	ldr	r1, [pc, #180]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fbc:	d106      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fbe:	4b29      	ldr	r3, [pc, #164]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	4a28      	ldr	r2, [pc, #160]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fc8:	60d3      	str	r3, [r2, #12]
 8002fca:	e011      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	2101      	movs	r1, #1
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 f843 	bl	8003068 <RCCEx_PLLSAI1_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fe6:	7cfb      	ldrb	r3, [r7, #19]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002fec:	7cfb      	ldrb	r3, [r7, #19]
 8002fee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01c      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003002:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800300a:	4916      	ldr	r1, [pc, #88]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800301a:	d10c      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	2102      	movs	r1, #2
 8003022:	4618      	mov	r0, r3
 8003024:	f000 f820 	bl	8003068 <RCCEx_PLLSAI1_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800302c:	7cfb      	ldrb	r3, [r7, #19]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003032:	7cfb      	ldrb	r3, [r7, #19]
 8003034:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003048:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003050:	4904      	ldr	r1, [pc, #16]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003058:	7cbb      	ldrb	r3, [r7, #18]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000

08003068 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003076:	4b74      	ldr	r3, [pc, #464]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d018      	beq.n	80030b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003082:	4b71      	ldr	r3, [pc, #452]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0203 	and.w	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d10d      	bne.n	80030ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
       ||
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800309a:	4b6b      	ldr	r3, [pc, #428]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	091b      	lsrs	r3, r3, #4
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
       ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d047      	beq.n	800313e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	73fb      	strb	r3, [r7, #15]
 80030b2:	e044      	b.n	800313e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d018      	beq.n	80030ee <RCCEx_PLLSAI1_Config+0x86>
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d825      	bhi.n	800310c <RCCEx_PLLSAI1_Config+0xa4>
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d002      	beq.n	80030ca <RCCEx_PLLSAI1_Config+0x62>
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d009      	beq.n	80030dc <RCCEx_PLLSAI1_Config+0x74>
 80030c8:	e020      	b.n	800310c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030ca:	4b5f      	ldr	r3, [pc, #380]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11d      	bne.n	8003112 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030da:	e01a      	b.n	8003112 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030dc:	4b5a      	ldr	r3, [pc, #360]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d116      	bne.n	8003116 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ec:	e013      	b.n	8003116 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030ee:	4b56      	ldr	r3, [pc, #344]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10f      	bne.n	800311a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030fa:	4b53      	ldr	r3, [pc, #332]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800310a:	e006      	b.n	800311a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      break;
 8003110:	e004      	b.n	800311c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003112:	bf00      	nop
 8003114:	e002      	b.n	800311c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003116:	bf00      	nop
 8003118:	e000      	b.n	800311c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800311a:	bf00      	nop
    }

    if(status == HAL_OK)
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10d      	bne.n	800313e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003122:	4b49      	ldr	r3, [pc, #292]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6819      	ldr	r1, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	3b01      	subs	r3, #1
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	430b      	orrs	r3, r1
 8003138:	4943      	ldr	r1, [pc, #268]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 800313a:	4313      	orrs	r3, r2
 800313c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d17c      	bne.n	800323e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003144:	4b40      	ldr	r3, [pc, #256]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a3f      	ldr	r2, [pc, #252]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 800314a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800314e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003150:	f7fd fe5e 	bl	8000e10 <HAL_GetTick>
 8003154:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003156:	e009      	b.n	800316c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003158:	f7fd fe5a 	bl	8000e10 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d902      	bls.n	800316c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	73fb      	strb	r3, [r7, #15]
        break;
 800316a:	e005      	b.n	8003178 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800316c:	4b36      	ldr	r3, [pc, #216]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1ef      	bne.n	8003158 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d15f      	bne.n	800323e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d110      	bne.n	80031a6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003184:	4b30      	ldr	r3, [pc, #192]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800318c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6892      	ldr	r2, [r2, #8]
 8003194:	0211      	lsls	r1, r2, #8
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68d2      	ldr	r2, [r2, #12]
 800319a:	06d2      	lsls	r2, r2, #27
 800319c:	430a      	orrs	r2, r1
 800319e:	492a      	ldr	r1, [pc, #168]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	610b      	str	r3, [r1, #16]
 80031a4:	e027      	b.n	80031f6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d112      	bne.n	80031d2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031ac:	4b26      	ldr	r3, [pc, #152]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6892      	ldr	r2, [r2, #8]
 80031bc:	0211      	lsls	r1, r2, #8
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6912      	ldr	r2, [r2, #16]
 80031c2:	0852      	lsrs	r2, r2, #1
 80031c4:	3a01      	subs	r2, #1
 80031c6:	0552      	lsls	r2, r2, #21
 80031c8:	430a      	orrs	r2, r1
 80031ca:	491f      	ldr	r1, [pc, #124]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	610b      	str	r3, [r1, #16]
 80031d0:	e011      	b.n	80031f6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031d2:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6892      	ldr	r2, [r2, #8]
 80031e2:	0211      	lsls	r1, r2, #8
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6952      	ldr	r2, [r2, #20]
 80031e8:	0852      	lsrs	r2, r2, #1
 80031ea:	3a01      	subs	r2, #1
 80031ec:	0652      	lsls	r2, r2, #25
 80031ee:	430a      	orrs	r2, r1
 80031f0:	4915      	ldr	r1, [pc, #84]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031f6:	4b14      	ldr	r3, [pc, #80]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a13      	ldr	r2, [pc, #76]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003200:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003202:	f7fd fe05 	bl	8000e10 <HAL_GetTick>
 8003206:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003208:	e009      	b.n	800321e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800320a:	f7fd fe01 	bl	8000e10 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d902      	bls.n	800321e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	73fb      	strb	r3, [r7, #15]
          break;
 800321c:	e005      	b.n	800322a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0ef      	beq.n	800320a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	4903      	ldr	r1, [pc, #12]	; (8003248 <RCCEx_PLLSAI1_Config+0x1e0>)
 800323a:	4313      	orrs	r3, r2
 800323c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000

0800324c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e040      	b.n	80032e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fd fc04 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	; 0x24
 8003278:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fade 	bl	8003854 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f8af 	bl	80033fc <UART_SetConfig>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e01b      	b.n	80032e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fb5d 	bl	8003998 <UART_CheckIdleState>
 80032de:	4603      	mov	r3, r0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08a      	sub	sp, #40	; 0x28
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	4613      	mov	r3, r2
 80032f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d178      	bne.n	80033f2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_UART_Transmit+0x24>
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e071      	b.n	80033f4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2221      	movs	r2, #33	; 0x21
 800331c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800331e:	f7fd fd77 	bl	8000e10 <HAL_GetTick>
 8003322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	88fa      	ldrh	r2, [r7, #6]
 8003328:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	88fa      	ldrh	r2, [r7, #6]
 8003330:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333c:	d108      	bne.n	8003350 <HAL_UART_Transmit+0x68>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d104      	bne.n	8003350 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	e003      	b.n	8003358 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003358:	e030      	b.n	80033bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2200      	movs	r2, #0
 8003362:	2180      	movs	r1, #128	; 0x80
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fbbf 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d004      	beq.n	800337a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e03c      	b.n	80033f4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	881a      	ldrh	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800338c:	b292      	uxth	r2, r2
 800338e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	3302      	adds	r3, #2
 8003394:	61bb      	str	r3, [r7, #24]
 8003396:	e008      	b.n	80033aa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	781a      	ldrb	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	b292      	uxth	r2, r2
 80033a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	3301      	adds	r3, #1
 80033a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1c8      	bne.n	800335a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2200      	movs	r2, #0
 80033d0:	2140      	movs	r1, #64	; 0x40
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fb88 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d004      	beq.n	80033e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2220      	movs	r2, #32
 80033e2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e005      	b.n	80033f4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	e000      	b.n	80033f4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80033f2:	2302      	movs	r3, #2
  }
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003400:	b08a      	sub	sp, #40	; 0x28
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	431a      	orrs	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	431a      	orrs	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	4313      	orrs	r3, r2
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4bb4      	ldr	r3, [pc, #720]	; (80036fc <UART_SetConfig+0x300>)
 800342c:	4013      	ands	r3, r2
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003434:	430b      	orrs	r3, r1
 8003436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4aa9      	ldr	r2, [pc, #676]	; (8003700 <UART_SetConfig+0x304>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d004      	beq.n	8003468 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003464:	4313      	orrs	r3, r2
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003478:	430a      	orrs	r2, r1
 800347a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4aa0      	ldr	r2, [pc, #640]	; (8003704 <UART_SetConfig+0x308>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d126      	bne.n	80034d4 <UART_SetConfig+0xd8>
 8003486:	4ba0      	ldr	r3, [pc, #640]	; (8003708 <UART_SetConfig+0x30c>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	2b03      	cmp	r3, #3
 8003492:	d81b      	bhi.n	80034cc <UART_SetConfig+0xd0>
 8003494:	a201      	add	r2, pc, #4	; (adr r2, 800349c <UART_SetConfig+0xa0>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034ad 	.word	0x080034ad
 80034a0:	080034bd 	.word	0x080034bd
 80034a4:	080034b5 	.word	0x080034b5
 80034a8:	080034c5 	.word	0x080034c5
 80034ac:	2301      	movs	r3, #1
 80034ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034b2:	e080      	b.n	80035b6 <UART_SetConfig+0x1ba>
 80034b4:	2302      	movs	r3, #2
 80034b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ba:	e07c      	b.n	80035b6 <UART_SetConfig+0x1ba>
 80034bc:	2304      	movs	r3, #4
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c2:	e078      	b.n	80035b6 <UART_SetConfig+0x1ba>
 80034c4:	2308      	movs	r3, #8
 80034c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ca:	e074      	b.n	80035b6 <UART_SetConfig+0x1ba>
 80034cc:	2310      	movs	r3, #16
 80034ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d2:	e070      	b.n	80035b6 <UART_SetConfig+0x1ba>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a8c      	ldr	r2, [pc, #560]	; (800370c <UART_SetConfig+0x310>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d138      	bne.n	8003550 <UART_SetConfig+0x154>
 80034de:	4b8a      	ldr	r3, [pc, #552]	; (8003708 <UART_SetConfig+0x30c>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b0c      	cmp	r3, #12
 80034ea:	d82d      	bhi.n	8003548 <UART_SetConfig+0x14c>
 80034ec:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <UART_SetConfig+0xf8>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	08003529 	.word	0x08003529
 80034f8:	08003549 	.word	0x08003549
 80034fc:	08003549 	.word	0x08003549
 8003500:	08003549 	.word	0x08003549
 8003504:	08003539 	.word	0x08003539
 8003508:	08003549 	.word	0x08003549
 800350c:	08003549 	.word	0x08003549
 8003510:	08003549 	.word	0x08003549
 8003514:	08003531 	.word	0x08003531
 8003518:	08003549 	.word	0x08003549
 800351c:	08003549 	.word	0x08003549
 8003520:	08003549 	.word	0x08003549
 8003524:	08003541 	.word	0x08003541
 8003528:	2300      	movs	r3, #0
 800352a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800352e:	e042      	b.n	80035b6 <UART_SetConfig+0x1ba>
 8003530:	2302      	movs	r3, #2
 8003532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003536:	e03e      	b.n	80035b6 <UART_SetConfig+0x1ba>
 8003538:	2304      	movs	r3, #4
 800353a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800353e:	e03a      	b.n	80035b6 <UART_SetConfig+0x1ba>
 8003540:	2308      	movs	r3, #8
 8003542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003546:	e036      	b.n	80035b6 <UART_SetConfig+0x1ba>
 8003548:	2310      	movs	r3, #16
 800354a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800354e:	e032      	b.n	80035b6 <UART_SetConfig+0x1ba>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a6a      	ldr	r2, [pc, #424]	; (8003700 <UART_SetConfig+0x304>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d12a      	bne.n	80035b0 <UART_SetConfig+0x1b4>
 800355a:	4b6b      	ldr	r3, [pc, #428]	; (8003708 <UART_SetConfig+0x30c>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003564:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003568:	d01a      	beq.n	80035a0 <UART_SetConfig+0x1a4>
 800356a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800356e:	d81b      	bhi.n	80035a8 <UART_SetConfig+0x1ac>
 8003570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003574:	d00c      	beq.n	8003590 <UART_SetConfig+0x194>
 8003576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800357a:	d815      	bhi.n	80035a8 <UART_SetConfig+0x1ac>
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <UART_SetConfig+0x18c>
 8003580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003584:	d008      	beq.n	8003598 <UART_SetConfig+0x19c>
 8003586:	e00f      	b.n	80035a8 <UART_SetConfig+0x1ac>
 8003588:	2300      	movs	r3, #0
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358e:	e012      	b.n	80035b6 <UART_SetConfig+0x1ba>
 8003590:	2302      	movs	r3, #2
 8003592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003596:	e00e      	b.n	80035b6 <UART_SetConfig+0x1ba>
 8003598:	2304      	movs	r3, #4
 800359a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359e:	e00a      	b.n	80035b6 <UART_SetConfig+0x1ba>
 80035a0:	2308      	movs	r3, #8
 80035a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a6:	e006      	b.n	80035b6 <UART_SetConfig+0x1ba>
 80035a8:	2310      	movs	r3, #16
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ae:	e002      	b.n	80035b6 <UART_SetConfig+0x1ba>
 80035b0:	2310      	movs	r3, #16
 80035b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a51      	ldr	r2, [pc, #324]	; (8003700 <UART_SetConfig+0x304>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d17a      	bne.n	80036b6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d824      	bhi.n	8003612 <UART_SetConfig+0x216>
 80035c8:	a201      	add	r2, pc, #4	; (adr r2, 80035d0 <UART_SetConfig+0x1d4>)
 80035ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ce:	bf00      	nop
 80035d0:	080035f5 	.word	0x080035f5
 80035d4:	08003613 	.word	0x08003613
 80035d8:	080035fd 	.word	0x080035fd
 80035dc:	08003613 	.word	0x08003613
 80035e0:	08003603 	.word	0x08003603
 80035e4:	08003613 	.word	0x08003613
 80035e8:	08003613 	.word	0x08003613
 80035ec:	08003613 	.word	0x08003613
 80035f0:	0800360b 	.word	0x0800360b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f4:	f7ff fab6 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 80035f8:	61f8      	str	r0, [r7, #28]
        break;
 80035fa:	e010      	b.n	800361e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035fc:	4b44      	ldr	r3, [pc, #272]	; (8003710 <UART_SetConfig+0x314>)
 80035fe:	61fb      	str	r3, [r7, #28]
        break;
 8003600:	e00d      	b.n	800361e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003602:	f7ff fa17 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 8003606:	61f8      	str	r0, [r7, #28]
        break;
 8003608:	e009      	b.n	800361e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360e:	61fb      	str	r3, [r7, #28]
        break;
 8003610:	e005      	b.n	800361e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800361c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8107 	beq.w	8003834 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4413      	add	r3, r2
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	429a      	cmp	r2, r3
 8003634:	d305      	bcc.n	8003642 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	429a      	cmp	r2, r3
 8003640:	d903      	bls.n	800364a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003648:	e0f4      	b.n	8003834 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	2200      	movs	r2, #0
 800364e:	461c      	mov	r4, r3
 8003650:	4615      	mov	r5, r2
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	022b      	lsls	r3, r5, #8
 800365c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003660:	0222      	lsls	r2, r4, #8
 8003662:	68f9      	ldr	r1, [r7, #12]
 8003664:	6849      	ldr	r1, [r1, #4]
 8003666:	0849      	lsrs	r1, r1, #1
 8003668:	2000      	movs	r0, #0
 800366a:	4688      	mov	r8, r1
 800366c:	4681      	mov	r9, r0
 800366e:	eb12 0a08 	adds.w	sl, r2, r8
 8003672:	eb43 0b09 	adc.w	fp, r3, r9
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003684:	4650      	mov	r0, sl
 8003686:	4659      	mov	r1, fp
 8003688:	f7fc fdf2 	bl	8000270 <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4613      	mov	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800369a:	d308      	bcc.n	80036ae <UART_SetConfig+0x2b2>
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036a2:	d204      	bcs.n	80036ae <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	60da      	str	r2, [r3, #12]
 80036ac:	e0c2      	b.n	8003834 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036b4:	e0be      	b.n	8003834 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036be:	d16a      	bne.n	8003796 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80036c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d834      	bhi.n	8003732 <UART_SetConfig+0x336>
 80036c8:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <UART_SetConfig+0x2d4>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	080036f5 	.word	0x080036f5
 80036d4:	08003715 	.word	0x08003715
 80036d8:	0800371d 	.word	0x0800371d
 80036dc:	08003733 	.word	0x08003733
 80036e0:	08003723 	.word	0x08003723
 80036e4:	08003733 	.word	0x08003733
 80036e8:	08003733 	.word	0x08003733
 80036ec:	08003733 	.word	0x08003733
 80036f0:	0800372b 	.word	0x0800372b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f4:	f7ff fa36 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 80036f8:	61f8      	str	r0, [r7, #28]
        break;
 80036fa:	e020      	b.n	800373e <UART_SetConfig+0x342>
 80036fc:	efff69f3 	.word	0xefff69f3
 8003700:	40008000 	.word	0x40008000
 8003704:	40013800 	.word	0x40013800
 8003708:	40021000 	.word	0x40021000
 800370c:	40004400 	.word	0x40004400
 8003710:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003714:	f7ff fa3c 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8003718:	61f8      	str	r0, [r7, #28]
        break;
 800371a:	e010      	b.n	800373e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800371c:	4b4c      	ldr	r3, [pc, #304]	; (8003850 <UART_SetConfig+0x454>)
 800371e:	61fb      	str	r3, [r7, #28]
        break;
 8003720:	e00d      	b.n	800373e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003722:	f7ff f987 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 8003726:	61f8      	str	r0, [r7, #28]
        break;
 8003728:	e009      	b.n	800373e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800372a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800372e:	61fb      	str	r3, [r7, #28]
        break;
 8003730:	e005      	b.n	800373e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800373c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d077      	beq.n	8003834 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005a      	lsls	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	441a      	add	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	2b0f      	cmp	r3, #15
 800375e:	d916      	bls.n	800378e <UART_SetConfig+0x392>
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003766:	d212      	bcs.n	800378e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	b29b      	uxth	r3, r3
 800376c:	f023 030f 	bic.w	r3, r3, #15
 8003770:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	085b      	lsrs	r3, r3, #1
 8003776:	b29b      	uxth	r3, r3
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	b29a      	uxth	r2, r3
 800377e:	8afb      	ldrh	r3, [r7, #22]
 8003780:	4313      	orrs	r3, r2
 8003782:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	8afa      	ldrh	r2, [r7, #22]
 800378a:	60da      	str	r2, [r3, #12]
 800378c:	e052      	b.n	8003834 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003794:	e04e      	b.n	8003834 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003796:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800379a:	2b08      	cmp	r3, #8
 800379c:	d827      	bhi.n	80037ee <UART_SetConfig+0x3f2>
 800379e:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <UART_SetConfig+0x3a8>)
 80037a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a4:	080037c9 	.word	0x080037c9
 80037a8:	080037d1 	.word	0x080037d1
 80037ac:	080037d9 	.word	0x080037d9
 80037b0:	080037ef 	.word	0x080037ef
 80037b4:	080037df 	.word	0x080037df
 80037b8:	080037ef 	.word	0x080037ef
 80037bc:	080037ef 	.word	0x080037ef
 80037c0:	080037ef 	.word	0x080037ef
 80037c4:	080037e7 	.word	0x080037e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037c8:	f7ff f9cc 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 80037cc:	61f8      	str	r0, [r7, #28]
        break;
 80037ce:	e014      	b.n	80037fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037d0:	f7ff f9de 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 80037d4:	61f8      	str	r0, [r7, #28]
        break;
 80037d6:	e010      	b.n	80037fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037d8:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <UART_SetConfig+0x454>)
 80037da:	61fb      	str	r3, [r7, #28]
        break;
 80037dc:	e00d      	b.n	80037fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037de:	f7ff f929 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80037e2:	61f8      	str	r0, [r7, #28]
        break;
 80037e4:	e009      	b.n	80037fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ea:	61fb      	str	r3, [r7, #28]
        break;
 80037ec:	e005      	b.n	80037fa <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037f8:	bf00      	nop
    }

    if (pclk != 0U)
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d019      	beq.n	8003834 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	085a      	lsrs	r2, r3, #1
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	441a      	add	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003812:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2b0f      	cmp	r3, #15
 8003818:	d909      	bls.n	800382e <UART_SetConfig+0x432>
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003820:	d205      	bcs.n	800382e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60da      	str	r2, [r3, #12]
 800382c:	e002      	b.n	8003834 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003840:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003844:	4618      	mov	r0, r3
 8003846:	3728      	adds	r7, #40	; 0x28
 8003848:	46bd      	mov	sp, r7
 800384a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800384e:	bf00      	nop
 8003850:	00f42400 	.word	0x00f42400

08003854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01a      	beq.n	800396a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003952:	d10a      	bne.n	800396a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  }
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b098      	sub	sp, #96	; 0x60
 800399c:	af02      	add	r7, sp, #8
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039a8:	f7fd fa32 	bl	8000e10 <HAL_GetTick>
 80039ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d12e      	bne.n	8003a1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c4:	2200      	movs	r2, #0
 80039c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f88c 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d021      	beq.n	8003a1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	e853 3f00 	ldrex	r3, [r3]
 80039e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ea:	653b      	str	r3, [r7, #80]	; 0x50
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f4:	647b      	str	r3, [r7, #68]	; 0x44
 80039f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e6      	bne.n	80039d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e062      	b.n	8003ae0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d149      	bne.n	8003abc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a30:	2200      	movs	r2, #0
 8003a32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f856 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d03c      	beq.n	8003abc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	623b      	str	r3, [r7, #32]
   return(result);
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a60:	633b      	str	r3, [r7, #48]	; 0x30
 8003a62:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e6      	bne.n	8003a42 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3308      	adds	r3, #8
 8003a92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a94:	61fa      	str	r2, [r7, #28]
 8003a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	69b9      	ldr	r1, [r7, #24]
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e5      	bne.n	8003a74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e011      	b.n	8003ae0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3758      	adds	r7, #88	; 0x58
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af8:	e049      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d045      	beq.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fd f985 	bl	8000e10 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e048      	b.n	8003bae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d031      	beq.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d110      	bne.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f838 	bl	8003bb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e029      	b.n	8003bae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b68:	d111      	bne.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f81e 	bl	8003bb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e00f      	b.n	8003bae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4013      	ands	r3, r2
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d0a6      	beq.n	8003afa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b095      	sub	sp, #84	; 0x54
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8003bde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003be2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003be4:	e841 2300 	strex	r3, r2, [r1]
 8003be8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e6      	bne.n	8003bbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e5      	bne.n	8003bf0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d118      	bne.n	8003c5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f023 0310 	bic.w	r3, r3, #16
 8003c40:	647b      	str	r3, [r7, #68]	; 0x44
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	6979      	ldr	r1, [r7, #20]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	613b      	str	r3, [r7, #16]
   return(result);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e6      	bne.n	8003c2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c72:	bf00      	nop
 8003c74:	3754      	adds	r7, #84	; 0x54
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <std>:
 8003c80:	2300      	movs	r3, #0
 8003c82:	b510      	push	{r4, lr}
 8003c84:	4604      	mov	r4, r0
 8003c86:	e9c0 3300 	strd	r3, r3, [r0]
 8003c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c8e:	6083      	str	r3, [r0, #8]
 8003c90:	8181      	strh	r1, [r0, #12]
 8003c92:	6643      	str	r3, [r0, #100]	; 0x64
 8003c94:	81c2      	strh	r2, [r0, #14]
 8003c96:	6183      	str	r3, [r0, #24]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	305c      	adds	r0, #92	; 0x5c
 8003c9e:	f000 f9e5 	bl	800406c <memset>
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <std+0x38>)
 8003ca4:	6263      	str	r3, [r4, #36]	; 0x24
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <std+0x3c>)
 8003ca8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003caa:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <std+0x40>)
 8003cac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <std+0x44>)
 8003cb0:	6224      	str	r4, [r4, #32]
 8003cb2:	6323      	str	r3, [r4, #48]	; 0x30
 8003cb4:	bd10      	pop	{r4, pc}
 8003cb6:	bf00      	nop
 8003cb8:	08003ebd 	.word	0x08003ebd
 8003cbc:	08003edf 	.word	0x08003edf
 8003cc0:	08003f17 	.word	0x08003f17
 8003cc4:	08003f3b 	.word	0x08003f3b

08003cc8 <stdio_exit_handler>:
 8003cc8:	4a02      	ldr	r2, [pc, #8]	; (8003cd4 <stdio_exit_handler+0xc>)
 8003cca:	4903      	ldr	r1, [pc, #12]	; (8003cd8 <stdio_exit_handler+0x10>)
 8003ccc:	4803      	ldr	r0, [pc, #12]	; (8003cdc <stdio_exit_handler+0x14>)
 8003cce:	f000 b869 	b.w	8003da4 <_fwalk_sglue>
 8003cd2:	bf00      	nop
 8003cd4:	2000000c 	.word	0x2000000c
 8003cd8:	08004a05 	.word	0x08004a05
 8003cdc:	20000018 	.word	0x20000018

08003ce0 <cleanup_stdio>:
 8003ce0:	6841      	ldr	r1, [r0, #4]
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <cleanup_stdio+0x34>)
 8003ce4:	4299      	cmp	r1, r3
 8003ce6:	b510      	push	{r4, lr}
 8003ce8:	4604      	mov	r4, r0
 8003cea:	d001      	beq.n	8003cf0 <cleanup_stdio+0x10>
 8003cec:	f000 fe8a 	bl	8004a04 <_fflush_r>
 8003cf0:	68a1      	ldr	r1, [r4, #8]
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <cleanup_stdio+0x38>)
 8003cf4:	4299      	cmp	r1, r3
 8003cf6:	d002      	beq.n	8003cfe <cleanup_stdio+0x1e>
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f000 fe83 	bl	8004a04 <_fflush_r>
 8003cfe:	68e1      	ldr	r1, [r4, #12]
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <cleanup_stdio+0x3c>)
 8003d02:	4299      	cmp	r1, r3
 8003d04:	d004      	beq.n	8003d10 <cleanup_stdio+0x30>
 8003d06:	4620      	mov	r0, r4
 8003d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d0c:	f000 be7a 	b.w	8004a04 <_fflush_r>
 8003d10:	bd10      	pop	{r4, pc}
 8003d12:	bf00      	nop
 8003d14:	20000168 	.word	0x20000168
 8003d18:	200001d0 	.word	0x200001d0
 8003d1c:	20000238 	.word	0x20000238

08003d20 <global_stdio_init.part.0>:
 8003d20:	b510      	push	{r4, lr}
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <global_stdio_init.part.0+0x30>)
 8003d24:	4c0b      	ldr	r4, [pc, #44]	; (8003d54 <global_stdio_init.part.0+0x34>)
 8003d26:	4a0c      	ldr	r2, [pc, #48]	; (8003d58 <global_stdio_init.part.0+0x38>)
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2104      	movs	r1, #4
 8003d30:	f7ff ffa6 	bl	8003c80 <std>
 8003d34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d38:	2201      	movs	r2, #1
 8003d3a:	2109      	movs	r1, #9
 8003d3c:	f7ff ffa0 	bl	8003c80 <std>
 8003d40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d44:	2202      	movs	r2, #2
 8003d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d4a:	2112      	movs	r1, #18
 8003d4c:	f7ff bf98 	b.w	8003c80 <std>
 8003d50:	200002a0 	.word	0x200002a0
 8003d54:	20000168 	.word	0x20000168
 8003d58:	08003cc9 	.word	0x08003cc9

08003d5c <__sfp_lock_acquire>:
 8003d5c:	4801      	ldr	r0, [pc, #4]	; (8003d64 <__sfp_lock_acquire+0x8>)
 8003d5e:	f000 b9fd 	b.w	800415c <__retarget_lock_acquire_recursive>
 8003d62:	bf00      	nop
 8003d64:	200002a9 	.word	0x200002a9

08003d68 <__sfp_lock_release>:
 8003d68:	4801      	ldr	r0, [pc, #4]	; (8003d70 <__sfp_lock_release+0x8>)
 8003d6a:	f000 b9f8 	b.w	800415e <__retarget_lock_release_recursive>
 8003d6e:	bf00      	nop
 8003d70:	200002a9 	.word	0x200002a9

08003d74 <__sinit>:
 8003d74:	b510      	push	{r4, lr}
 8003d76:	4604      	mov	r4, r0
 8003d78:	f7ff fff0 	bl	8003d5c <__sfp_lock_acquire>
 8003d7c:	6a23      	ldr	r3, [r4, #32]
 8003d7e:	b11b      	cbz	r3, 8003d88 <__sinit+0x14>
 8003d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d84:	f7ff bff0 	b.w	8003d68 <__sfp_lock_release>
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <__sinit+0x28>)
 8003d8a:	6223      	str	r3, [r4, #32]
 8003d8c:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <__sinit+0x2c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f5      	bne.n	8003d80 <__sinit+0xc>
 8003d94:	f7ff ffc4 	bl	8003d20 <global_stdio_init.part.0>
 8003d98:	e7f2      	b.n	8003d80 <__sinit+0xc>
 8003d9a:	bf00      	nop
 8003d9c:	08003ce1 	.word	0x08003ce1
 8003da0:	200002a0 	.word	0x200002a0

08003da4 <_fwalk_sglue>:
 8003da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003da8:	4607      	mov	r7, r0
 8003daa:	4688      	mov	r8, r1
 8003dac:	4614      	mov	r4, r2
 8003dae:	2600      	movs	r6, #0
 8003db0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003db4:	f1b9 0901 	subs.w	r9, r9, #1
 8003db8:	d505      	bpl.n	8003dc6 <_fwalk_sglue+0x22>
 8003dba:	6824      	ldr	r4, [r4, #0]
 8003dbc:	2c00      	cmp	r4, #0
 8003dbe:	d1f7      	bne.n	8003db0 <_fwalk_sglue+0xc>
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dc6:	89ab      	ldrh	r3, [r5, #12]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d907      	bls.n	8003ddc <_fwalk_sglue+0x38>
 8003dcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	d003      	beq.n	8003ddc <_fwalk_sglue+0x38>
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	4638      	mov	r0, r7
 8003dd8:	47c0      	blx	r8
 8003dda:	4306      	orrs	r6, r0
 8003ddc:	3568      	adds	r5, #104	; 0x68
 8003dde:	e7e9      	b.n	8003db4 <_fwalk_sglue+0x10>

08003de0 <iprintf>:
 8003de0:	b40f      	push	{r0, r1, r2, r3}
 8003de2:	b507      	push	{r0, r1, r2, lr}
 8003de4:	4906      	ldr	r1, [pc, #24]	; (8003e00 <iprintf+0x20>)
 8003de6:	ab04      	add	r3, sp, #16
 8003de8:	6808      	ldr	r0, [r1, #0]
 8003dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dee:	6881      	ldr	r1, [r0, #8]
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	f000 fad7 	bl	80043a4 <_vfiprintf_r>
 8003df6:	b003      	add	sp, #12
 8003df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dfc:	b004      	add	sp, #16
 8003dfe:	4770      	bx	lr
 8003e00:	20000064 	.word	0x20000064

08003e04 <_puts_r>:
 8003e04:	6a03      	ldr	r3, [r0, #32]
 8003e06:	b570      	push	{r4, r5, r6, lr}
 8003e08:	6884      	ldr	r4, [r0, #8]
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	460e      	mov	r6, r1
 8003e0e:	b90b      	cbnz	r3, 8003e14 <_puts_r+0x10>
 8003e10:	f7ff ffb0 	bl	8003d74 <__sinit>
 8003e14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e16:	07db      	lsls	r3, r3, #31
 8003e18:	d405      	bmi.n	8003e26 <_puts_r+0x22>
 8003e1a:	89a3      	ldrh	r3, [r4, #12]
 8003e1c:	0598      	lsls	r0, r3, #22
 8003e1e:	d402      	bmi.n	8003e26 <_puts_r+0x22>
 8003e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e22:	f000 f99b 	bl	800415c <__retarget_lock_acquire_recursive>
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	0719      	lsls	r1, r3, #28
 8003e2a:	d513      	bpl.n	8003e54 <_puts_r+0x50>
 8003e2c:	6923      	ldr	r3, [r4, #16]
 8003e2e:	b18b      	cbz	r3, 8003e54 <_puts_r+0x50>
 8003e30:	3e01      	subs	r6, #1
 8003e32:	68a3      	ldr	r3, [r4, #8]
 8003e34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	60a3      	str	r3, [r4, #8]
 8003e3c:	b9e9      	cbnz	r1, 8003e7a <_puts_r+0x76>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	da2e      	bge.n	8003ea0 <_puts_r+0x9c>
 8003e42:	4622      	mov	r2, r4
 8003e44:	210a      	movs	r1, #10
 8003e46:	4628      	mov	r0, r5
 8003e48:	f000 f87b 	bl	8003f42 <__swbuf_r>
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d007      	beq.n	8003e60 <_puts_r+0x5c>
 8003e50:	250a      	movs	r5, #10
 8003e52:	e007      	b.n	8003e64 <_puts_r+0x60>
 8003e54:	4621      	mov	r1, r4
 8003e56:	4628      	mov	r0, r5
 8003e58:	f000 f8b0 	bl	8003fbc <__swsetup_r>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d0e7      	beq.n	8003e30 <_puts_r+0x2c>
 8003e60:	f04f 35ff 	mov.w	r5, #4294967295
 8003e64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e66:	07da      	lsls	r2, r3, #31
 8003e68:	d405      	bmi.n	8003e76 <_puts_r+0x72>
 8003e6a:	89a3      	ldrh	r3, [r4, #12]
 8003e6c:	059b      	lsls	r3, r3, #22
 8003e6e:	d402      	bmi.n	8003e76 <_puts_r+0x72>
 8003e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e72:	f000 f974 	bl	800415e <__retarget_lock_release_recursive>
 8003e76:	4628      	mov	r0, r5
 8003e78:	bd70      	pop	{r4, r5, r6, pc}
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	da04      	bge.n	8003e88 <_puts_r+0x84>
 8003e7e:	69a2      	ldr	r2, [r4, #24]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	dc06      	bgt.n	8003e92 <_puts_r+0x8e>
 8003e84:	290a      	cmp	r1, #10
 8003e86:	d004      	beq.n	8003e92 <_puts_r+0x8e>
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	6022      	str	r2, [r4, #0]
 8003e8e:	7019      	strb	r1, [r3, #0]
 8003e90:	e7cf      	b.n	8003e32 <_puts_r+0x2e>
 8003e92:	4622      	mov	r2, r4
 8003e94:	4628      	mov	r0, r5
 8003e96:	f000 f854 	bl	8003f42 <__swbuf_r>
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d1c9      	bne.n	8003e32 <_puts_r+0x2e>
 8003e9e:	e7df      	b.n	8003e60 <_puts_r+0x5c>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	250a      	movs	r5, #10
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	6022      	str	r2, [r4, #0]
 8003ea8:	701d      	strb	r5, [r3, #0]
 8003eaa:	e7db      	b.n	8003e64 <_puts_r+0x60>

08003eac <puts>:
 8003eac:	4b02      	ldr	r3, [pc, #8]	; (8003eb8 <puts+0xc>)
 8003eae:	4601      	mov	r1, r0
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	f7ff bfa7 	b.w	8003e04 <_puts_r>
 8003eb6:	bf00      	nop
 8003eb8:	20000064 	.word	0x20000064

08003ebc <__sread>:
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec4:	f000 f8fc 	bl	80040c0 <_read_r>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	bfab      	itete	ge
 8003ecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ece:	89a3      	ldrhlt	r3, [r4, #12]
 8003ed0:	181b      	addge	r3, r3, r0
 8003ed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ed6:	bfac      	ite	ge
 8003ed8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003eda:	81a3      	strhlt	r3, [r4, #12]
 8003edc:	bd10      	pop	{r4, pc}

08003ede <__swrite>:
 8003ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee2:	461f      	mov	r7, r3
 8003ee4:	898b      	ldrh	r3, [r1, #12]
 8003ee6:	05db      	lsls	r3, r3, #23
 8003ee8:	4605      	mov	r5, r0
 8003eea:	460c      	mov	r4, r1
 8003eec:	4616      	mov	r6, r2
 8003eee:	d505      	bpl.n	8003efc <__swrite+0x1e>
 8003ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f000 f8d0 	bl	800409c <_lseek_r>
 8003efc:	89a3      	ldrh	r3, [r4, #12]
 8003efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f06:	81a3      	strh	r3, [r4, #12]
 8003f08:	4632      	mov	r2, r6
 8003f0a:	463b      	mov	r3, r7
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f12:	f000 b8e7 	b.w	80040e4 <_write_r>

08003f16 <__sseek>:
 8003f16:	b510      	push	{r4, lr}
 8003f18:	460c      	mov	r4, r1
 8003f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f1e:	f000 f8bd 	bl	800409c <_lseek_r>
 8003f22:	1c43      	adds	r3, r0, #1
 8003f24:	89a3      	ldrh	r3, [r4, #12]
 8003f26:	bf15      	itete	ne
 8003f28:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f32:	81a3      	strheq	r3, [r4, #12]
 8003f34:	bf18      	it	ne
 8003f36:	81a3      	strhne	r3, [r4, #12]
 8003f38:	bd10      	pop	{r4, pc}

08003f3a <__sclose>:
 8003f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f3e:	f000 b89d 	b.w	800407c <_close_r>

08003f42 <__swbuf_r>:
 8003f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f44:	460e      	mov	r6, r1
 8003f46:	4614      	mov	r4, r2
 8003f48:	4605      	mov	r5, r0
 8003f4a:	b118      	cbz	r0, 8003f54 <__swbuf_r+0x12>
 8003f4c:	6a03      	ldr	r3, [r0, #32]
 8003f4e:	b90b      	cbnz	r3, 8003f54 <__swbuf_r+0x12>
 8003f50:	f7ff ff10 	bl	8003d74 <__sinit>
 8003f54:	69a3      	ldr	r3, [r4, #24]
 8003f56:	60a3      	str	r3, [r4, #8]
 8003f58:	89a3      	ldrh	r3, [r4, #12]
 8003f5a:	071a      	lsls	r2, r3, #28
 8003f5c:	d525      	bpl.n	8003faa <__swbuf_r+0x68>
 8003f5e:	6923      	ldr	r3, [r4, #16]
 8003f60:	b31b      	cbz	r3, 8003faa <__swbuf_r+0x68>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	6922      	ldr	r2, [r4, #16]
 8003f66:	1a98      	subs	r0, r3, r2
 8003f68:	6963      	ldr	r3, [r4, #20]
 8003f6a:	b2f6      	uxtb	r6, r6
 8003f6c:	4283      	cmp	r3, r0
 8003f6e:	4637      	mov	r7, r6
 8003f70:	dc04      	bgt.n	8003f7c <__swbuf_r+0x3a>
 8003f72:	4621      	mov	r1, r4
 8003f74:	4628      	mov	r0, r5
 8003f76:	f000 fd45 	bl	8004a04 <_fflush_r>
 8003f7a:	b9e0      	cbnz	r0, 8003fb6 <__swbuf_r+0x74>
 8003f7c:	68a3      	ldr	r3, [r4, #8]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	60a3      	str	r3, [r4, #8]
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	6022      	str	r2, [r4, #0]
 8003f88:	701e      	strb	r6, [r3, #0]
 8003f8a:	6962      	ldr	r2, [r4, #20]
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d004      	beq.n	8003f9c <__swbuf_r+0x5a>
 8003f92:	89a3      	ldrh	r3, [r4, #12]
 8003f94:	07db      	lsls	r3, r3, #31
 8003f96:	d506      	bpl.n	8003fa6 <__swbuf_r+0x64>
 8003f98:	2e0a      	cmp	r6, #10
 8003f9a:	d104      	bne.n	8003fa6 <__swbuf_r+0x64>
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f000 fd30 	bl	8004a04 <_fflush_r>
 8003fa4:	b938      	cbnz	r0, 8003fb6 <__swbuf_r+0x74>
 8003fa6:	4638      	mov	r0, r7
 8003fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003faa:	4621      	mov	r1, r4
 8003fac:	4628      	mov	r0, r5
 8003fae:	f000 f805 	bl	8003fbc <__swsetup_r>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	d0d5      	beq.n	8003f62 <__swbuf_r+0x20>
 8003fb6:	f04f 37ff 	mov.w	r7, #4294967295
 8003fba:	e7f4      	b.n	8003fa6 <__swbuf_r+0x64>

08003fbc <__swsetup_r>:
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	4b2a      	ldr	r3, [pc, #168]	; (8004068 <__swsetup_r+0xac>)
 8003fc0:	4605      	mov	r5, r0
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	b118      	cbz	r0, 8003fd0 <__swsetup_r+0x14>
 8003fc8:	6a03      	ldr	r3, [r0, #32]
 8003fca:	b90b      	cbnz	r3, 8003fd0 <__swsetup_r+0x14>
 8003fcc:	f7ff fed2 	bl	8003d74 <__sinit>
 8003fd0:	89a3      	ldrh	r3, [r4, #12]
 8003fd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fd6:	0718      	lsls	r0, r3, #28
 8003fd8:	d422      	bmi.n	8004020 <__swsetup_r+0x64>
 8003fda:	06d9      	lsls	r1, r3, #27
 8003fdc:	d407      	bmi.n	8003fee <__swsetup_r+0x32>
 8003fde:	2309      	movs	r3, #9
 8003fe0:	602b      	str	r3, [r5, #0]
 8003fe2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fe6:	81a3      	strh	r3, [r4, #12]
 8003fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fec:	e034      	b.n	8004058 <__swsetup_r+0x9c>
 8003fee:	0758      	lsls	r0, r3, #29
 8003ff0:	d512      	bpl.n	8004018 <__swsetup_r+0x5c>
 8003ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ff4:	b141      	cbz	r1, 8004008 <__swsetup_r+0x4c>
 8003ff6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ffa:	4299      	cmp	r1, r3
 8003ffc:	d002      	beq.n	8004004 <__swsetup_r+0x48>
 8003ffe:	4628      	mov	r0, r5
 8004000:	f000 f8ae 	bl	8004160 <_free_r>
 8004004:	2300      	movs	r3, #0
 8004006:	6363      	str	r3, [r4, #52]	; 0x34
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	2300      	movs	r3, #0
 8004012:	6063      	str	r3, [r4, #4]
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	6023      	str	r3, [r4, #0]
 8004018:	89a3      	ldrh	r3, [r4, #12]
 800401a:	f043 0308 	orr.w	r3, r3, #8
 800401e:	81a3      	strh	r3, [r4, #12]
 8004020:	6923      	ldr	r3, [r4, #16]
 8004022:	b94b      	cbnz	r3, 8004038 <__swsetup_r+0x7c>
 8004024:	89a3      	ldrh	r3, [r4, #12]
 8004026:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800402a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800402e:	d003      	beq.n	8004038 <__swsetup_r+0x7c>
 8004030:	4621      	mov	r1, r4
 8004032:	4628      	mov	r0, r5
 8004034:	f000 fd34 	bl	8004aa0 <__smakebuf_r>
 8004038:	89a0      	ldrh	r0, [r4, #12]
 800403a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800403e:	f010 0301 	ands.w	r3, r0, #1
 8004042:	d00a      	beq.n	800405a <__swsetup_r+0x9e>
 8004044:	2300      	movs	r3, #0
 8004046:	60a3      	str	r3, [r4, #8]
 8004048:	6963      	ldr	r3, [r4, #20]
 800404a:	425b      	negs	r3, r3
 800404c:	61a3      	str	r3, [r4, #24]
 800404e:	6923      	ldr	r3, [r4, #16]
 8004050:	b943      	cbnz	r3, 8004064 <__swsetup_r+0xa8>
 8004052:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004056:	d1c4      	bne.n	8003fe2 <__swsetup_r+0x26>
 8004058:	bd38      	pop	{r3, r4, r5, pc}
 800405a:	0781      	lsls	r1, r0, #30
 800405c:	bf58      	it	pl
 800405e:	6963      	ldrpl	r3, [r4, #20]
 8004060:	60a3      	str	r3, [r4, #8]
 8004062:	e7f4      	b.n	800404e <__swsetup_r+0x92>
 8004064:	2000      	movs	r0, #0
 8004066:	e7f7      	b.n	8004058 <__swsetup_r+0x9c>
 8004068:	20000064 	.word	0x20000064

0800406c <memset>:
 800406c:	4402      	add	r2, r0
 800406e:	4603      	mov	r3, r0
 8004070:	4293      	cmp	r3, r2
 8004072:	d100      	bne.n	8004076 <memset+0xa>
 8004074:	4770      	bx	lr
 8004076:	f803 1b01 	strb.w	r1, [r3], #1
 800407a:	e7f9      	b.n	8004070 <memset+0x4>

0800407c <_close_r>:
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	4d06      	ldr	r5, [pc, #24]	; (8004098 <_close_r+0x1c>)
 8004080:	2300      	movs	r3, #0
 8004082:	4604      	mov	r4, r0
 8004084:	4608      	mov	r0, r1
 8004086:	602b      	str	r3, [r5, #0]
 8004088:	f7fc fdb3 	bl	8000bf2 <_close>
 800408c:	1c43      	adds	r3, r0, #1
 800408e:	d102      	bne.n	8004096 <_close_r+0x1a>
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	b103      	cbz	r3, 8004096 <_close_r+0x1a>
 8004094:	6023      	str	r3, [r4, #0]
 8004096:	bd38      	pop	{r3, r4, r5, pc}
 8004098:	200002a4 	.word	0x200002a4

0800409c <_lseek_r>:
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	4d07      	ldr	r5, [pc, #28]	; (80040bc <_lseek_r+0x20>)
 80040a0:	4604      	mov	r4, r0
 80040a2:	4608      	mov	r0, r1
 80040a4:	4611      	mov	r1, r2
 80040a6:	2200      	movs	r2, #0
 80040a8:	602a      	str	r2, [r5, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	f7fc fdc8 	bl	8000c40 <_lseek>
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	d102      	bne.n	80040ba <_lseek_r+0x1e>
 80040b4:	682b      	ldr	r3, [r5, #0]
 80040b6:	b103      	cbz	r3, 80040ba <_lseek_r+0x1e>
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	bd38      	pop	{r3, r4, r5, pc}
 80040bc:	200002a4 	.word	0x200002a4

080040c0 <_read_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	4d07      	ldr	r5, [pc, #28]	; (80040e0 <_read_r+0x20>)
 80040c4:	4604      	mov	r4, r0
 80040c6:	4608      	mov	r0, r1
 80040c8:	4611      	mov	r1, r2
 80040ca:	2200      	movs	r2, #0
 80040cc:	602a      	str	r2, [r5, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	f7fc fd56 	bl	8000b80 <_read>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d102      	bne.n	80040de <_read_r+0x1e>
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	b103      	cbz	r3, 80040de <_read_r+0x1e>
 80040dc:	6023      	str	r3, [r4, #0]
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	200002a4 	.word	0x200002a4

080040e4 <_write_r>:
 80040e4:	b538      	push	{r3, r4, r5, lr}
 80040e6:	4d07      	ldr	r5, [pc, #28]	; (8004104 <_write_r+0x20>)
 80040e8:	4604      	mov	r4, r0
 80040ea:	4608      	mov	r0, r1
 80040ec:	4611      	mov	r1, r2
 80040ee:	2200      	movs	r2, #0
 80040f0:	602a      	str	r2, [r5, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	f7fc fd61 	bl	8000bba <_write>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	d102      	bne.n	8004102 <_write_r+0x1e>
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	b103      	cbz	r3, 8004102 <_write_r+0x1e>
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	bd38      	pop	{r3, r4, r5, pc}
 8004104:	200002a4 	.word	0x200002a4

08004108 <__errno>:
 8004108:	4b01      	ldr	r3, [pc, #4]	; (8004110 <__errno+0x8>)
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000064 	.word	0x20000064

08004114 <__libc_init_array>:
 8004114:	b570      	push	{r4, r5, r6, lr}
 8004116:	4d0d      	ldr	r5, [pc, #52]	; (800414c <__libc_init_array+0x38>)
 8004118:	4c0d      	ldr	r4, [pc, #52]	; (8004150 <__libc_init_array+0x3c>)
 800411a:	1b64      	subs	r4, r4, r5
 800411c:	10a4      	asrs	r4, r4, #2
 800411e:	2600      	movs	r6, #0
 8004120:	42a6      	cmp	r6, r4
 8004122:	d109      	bne.n	8004138 <__libc_init_array+0x24>
 8004124:	4d0b      	ldr	r5, [pc, #44]	; (8004154 <__libc_init_array+0x40>)
 8004126:	4c0c      	ldr	r4, [pc, #48]	; (8004158 <__libc_init_array+0x44>)
 8004128:	f000 fd28 	bl	8004b7c <_init>
 800412c:	1b64      	subs	r4, r4, r5
 800412e:	10a4      	asrs	r4, r4, #2
 8004130:	2600      	movs	r6, #0
 8004132:	42a6      	cmp	r6, r4
 8004134:	d105      	bne.n	8004142 <__libc_init_array+0x2e>
 8004136:	bd70      	pop	{r4, r5, r6, pc}
 8004138:	f855 3b04 	ldr.w	r3, [r5], #4
 800413c:	4798      	blx	r3
 800413e:	3601      	adds	r6, #1
 8004140:	e7ee      	b.n	8004120 <__libc_init_array+0xc>
 8004142:	f855 3b04 	ldr.w	r3, [r5], #4
 8004146:	4798      	blx	r3
 8004148:	3601      	adds	r6, #1
 800414a:	e7f2      	b.n	8004132 <__libc_init_array+0x1e>
 800414c:	08004cdc 	.word	0x08004cdc
 8004150:	08004cdc 	.word	0x08004cdc
 8004154:	08004cdc 	.word	0x08004cdc
 8004158:	08004ce0 	.word	0x08004ce0

0800415c <__retarget_lock_acquire_recursive>:
 800415c:	4770      	bx	lr

0800415e <__retarget_lock_release_recursive>:
 800415e:	4770      	bx	lr

08004160 <_free_r>:
 8004160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004162:	2900      	cmp	r1, #0
 8004164:	d044      	beq.n	80041f0 <_free_r+0x90>
 8004166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800416a:	9001      	str	r0, [sp, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	f1a1 0404 	sub.w	r4, r1, #4
 8004172:	bfb8      	it	lt
 8004174:	18e4      	addlt	r4, r4, r3
 8004176:	f000 f8df 	bl	8004338 <__malloc_lock>
 800417a:	4a1e      	ldr	r2, [pc, #120]	; (80041f4 <_free_r+0x94>)
 800417c:	9801      	ldr	r0, [sp, #4]
 800417e:	6813      	ldr	r3, [r2, #0]
 8004180:	b933      	cbnz	r3, 8004190 <_free_r+0x30>
 8004182:	6063      	str	r3, [r4, #4]
 8004184:	6014      	str	r4, [r2, #0]
 8004186:	b003      	add	sp, #12
 8004188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800418c:	f000 b8da 	b.w	8004344 <__malloc_unlock>
 8004190:	42a3      	cmp	r3, r4
 8004192:	d908      	bls.n	80041a6 <_free_r+0x46>
 8004194:	6825      	ldr	r5, [r4, #0]
 8004196:	1961      	adds	r1, r4, r5
 8004198:	428b      	cmp	r3, r1
 800419a:	bf01      	itttt	eq
 800419c:	6819      	ldreq	r1, [r3, #0]
 800419e:	685b      	ldreq	r3, [r3, #4]
 80041a0:	1949      	addeq	r1, r1, r5
 80041a2:	6021      	streq	r1, [r4, #0]
 80041a4:	e7ed      	b.n	8004182 <_free_r+0x22>
 80041a6:	461a      	mov	r2, r3
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	b10b      	cbz	r3, 80041b0 <_free_r+0x50>
 80041ac:	42a3      	cmp	r3, r4
 80041ae:	d9fa      	bls.n	80041a6 <_free_r+0x46>
 80041b0:	6811      	ldr	r1, [r2, #0]
 80041b2:	1855      	adds	r5, r2, r1
 80041b4:	42a5      	cmp	r5, r4
 80041b6:	d10b      	bne.n	80041d0 <_free_r+0x70>
 80041b8:	6824      	ldr	r4, [r4, #0]
 80041ba:	4421      	add	r1, r4
 80041bc:	1854      	adds	r4, r2, r1
 80041be:	42a3      	cmp	r3, r4
 80041c0:	6011      	str	r1, [r2, #0]
 80041c2:	d1e0      	bne.n	8004186 <_free_r+0x26>
 80041c4:	681c      	ldr	r4, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	6053      	str	r3, [r2, #4]
 80041ca:	440c      	add	r4, r1
 80041cc:	6014      	str	r4, [r2, #0]
 80041ce:	e7da      	b.n	8004186 <_free_r+0x26>
 80041d0:	d902      	bls.n	80041d8 <_free_r+0x78>
 80041d2:	230c      	movs	r3, #12
 80041d4:	6003      	str	r3, [r0, #0]
 80041d6:	e7d6      	b.n	8004186 <_free_r+0x26>
 80041d8:	6825      	ldr	r5, [r4, #0]
 80041da:	1961      	adds	r1, r4, r5
 80041dc:	428b      	cmp	r3, r1
 80041de:	bf04      	itt	eq
 80041e0:	6819      	ldreq	r1, [r3, #0]
 80041e2:	685b      	ldreq	r3, [r3, #4]
 80041e4:	6063      	str	r3, [r4, #4]
 80041e6:	bf04      	itt	eq
 80041e8:	1949      	addeq	r1, r1, r5
 80041ea:	6021      	streq	r1, [r4, #0]
 80041ec:	6054      	str	r4, [r2, #4]
 80041ee:	e7ca      	b.n	8004186 <_free_r+0x26>
 80041f0:	b003      	add	sp, #12
 80041f2:	bd30      	pop	{r4, r5, pc}
 80041f4:	200002ac 	.word	0x200002ac

080041f8 <sbrk_aligned>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	4e0e      	ldr	r6, [pc, #56]	; (8004234 <sbrk_aligned+0x3c>)
 80041fc:	460c      	mov	r4, r1
 80041fe:	6831      	ldr	r1, [r6, #0]
 8004200:	4605      	mov	r5, r0
 8004202:	b911      	cbnz	r1, 800420a <sbrk_aligned+0x12>
 8004204:	f000 fcaa 	bl	8004b5c <_sbrk_r>
 8004208:	6030      	str	r0, [r6, #0]
 800420a:	4621      	mov	r1, r4
 800420c:	4628      	mov	r0, r5
 800420e:	f000 fca5 	bl	8004b5c <_sbrk_r>
 8004212:	1c43      	adds	r3, r0, #1
 8004214:	d00a      	beq.n	800422c <sbrk_aligned+0x34>
 8004216:	1cc4      	adds	r4, r0, #3
 8004218:	f024 0403 	bic.w	r4, r4, #3
 800421c:	42a0      	cmp	r0, r4
 800421e:	d007      	beq.n	8004230 <sbrk_aligned+0x38>
 8004220:	1a21      	subs	r1, r4, r0
 8004222:	4628      	mov	r0, r5
 8004224:	f000 fc9a 	bl	8004b5c <_sbrk_r>
 8004228:	3001      	adds	r0, #1
 800422a:	d101      	bne.n	8004230 <sbrk_aligned+0x38>
 800422c:	f04f 34ff 	mov.w	r4, #4294967295
 8004230:	4620      	mov	r0, r4
 8004232:	bd70      	pop	{r4, r5, r6, pc}
 8004234:	200002b0 	.word	0x200002b0

08004238 <_malloc_r>:
 8004238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800423c:	1ccd      	adds	r5, r1, #3
 800423e:	f025 0503 	bic.w	r5, r5, #3
 8004242:	3508      	adds	r5, #8
 8004244:	2d0c      	cmp	r5, #12
 8004246:	bf38      	it	cc
 8004248:	250c      	movcc	r5, #12
 800424a:	2d00      	cmp	r5, #0
 800424c:	4607      	mov	r7, r0
 800424e:	db01      	blt.n	8004254 <_malloc_r+0x1c>
 8004250:	42a9      	cmp	r1, r5
 8004252:	d905      	bls.n	8004260 <_malloc_r+0x28>
 8004254:	230c      	movs	r3, #12
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	2600      	movs	r6, #0
 800425a:	4630      	mov	r0, r6
 800425c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004260:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004334 <_malloc_r+0xfc>
 8004264:	f000 f868 	bl	8004338 <__malloc_lock>
 8004268:	f8d8 3000 	ldr.w	r3, [r8]
 800426c:	461c      	mov	r4, r3
 800426e:	bb5c      	cbnz	r4, 80042c8 <_malloc_r+0x90>
 8004270:	4629      	mov	r1, r5
 8004272:	4638      	mov	r0, r7
 8004274:	f7ff ffc0 	bl	80041f8 <sbrk_aligned>
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	4604      	mov	r4, r0
 800427c:	d155      	bne.n	800432a <_malloc_r+0xf2>
 800427e:	f8d8 4000 	ldr.w	r4, [r8]
 8004282:	4626      	mov	r6, r4
 8004284:	2e00      	cmp	r6, #0
 8004286:	d145      	bne.n	8004314 <_malloc_r+0xdc>
 8004288:	2c00      	cmp	r4, #0
 800428a:	d048      	beq.n	800431e <_malloc_r+0xe6>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	4631      	mov	r1, r6
 8004290:	4638      	mov	r0, r7
 8004292:	eb04 0903 	add.w	r9, r4, r3
 8004296:	f000 fc61 	bl	8004b5c <_sbrk_r>
 800429a:	4581      	cmp	r9, r0
 800429c:	d13f      	bne.n	800431e <_malloc_r+0xe6>
 800429e:	6821      	ldr	r1, [r4, #0]
 80042a0:	1a6d      	subs	r5, r5, r1
 80042a2:	4629      	mov	r1, r5
 80042a4:	4638      	mov	r0, r7
 80042a6:	f7ff ffa7 	bl	80041f8 <sbrk_aligned>
 80042aa:	3001      	adds	r0, #1
 80042ac:	d037      	beq.n	800431e <_malloc_r+0xe6>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	442b      	add	r3, r5
 80042b2:	6023      	str	r3, [r4, #0]
 80042b4:	f8d8 3000 	ldr.w	r3, [r8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d038      	beq.n	800432e <_malloc_r+0xf6>
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	42a2      	cmp	r2, r4
 80042c0:	d12b      	bne.n	800431a <_malloc_r+0xe2>
 80042c2:	2200      	movs	r2, #0
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	e00f      	b.n	80042e8 <_malloc_r+0xb0>
 80042c8:	6822      	ldr	r2, [r4, #0]
 80042ca:	1b52      	subs	r2, r2, r5
 80042cc:	d41f      	bmi.n	800430e <_malloc_r+0xd6>
 80042ce:	2a0b      	cmp	r2, #11
 80042d0:	d917      	bls.n	8004302 <_malloc_r+0xca>
 80042d2:	1961      	adds	r1, r4, r5
 80042d4:	42a3      	cmp	r3, r4
 80042d6:	6025      	str	r5, [r4, #0]
 80042d8:	bf18      	it	ne
 80042da:	6059      	strne	r1, [r3, #4]
 80042dc:	6863      	ldr	r3, [r4, #4]
 80042de:	bf08      	it	eq
 80042e0:	f8c8 1000 	streq.w	r1, [r8]
 80042e4:	5162      	str	r2, [r4, r5]
 80042e6:	604b      	str	r3, [r1, #4]
 80042e8:	4638      	mov	r0, r7
 80042ea:	f104 060b 	add.w	r6, r4, #11
 80042ee:	f000 f829 	bl	8004344 <__malloc_unlock>
 80042f2:	f026 0607 	bic.w	r6, r6, #7
 80042f6:	1d23      	adds	r3, r4, #4
 80042f8:	1af2      	subs	r2, r6, r3
 80042fa:	d0ae      	beq.n	800425a <_malloc_r+0x22>
 80042fc:	1b9b      	subs	r3, r3, r6
 80042fe:	50a3      	str	r3, [r4, r2]
 8004300:	e7ab      	b.n	800425a <_malloc_r+0x22>
 8004302:	42a3      	cmp	r3, r4
 8004304:	6862      	ldr	r2, [r4, #4]
 8004306:	d1dd      	bne.n	80042c4 <_malloc_r+0x8c>
 8004308:	f8c8 2000 	str.w	r2, [r8]
 800430c:	e7ec      	b.n	80042e8 <_malloc_r+0xb0>
 800430e:	4623      	mov	r3, r4
 8004310:	6864      	ldr	r4, [r4, #4]
 8004312:	e7ac      	b.n	800426e <_malloc_r+0x36>
 8004314:	4634      	mov	r4, r6
 8004316:	6876      	ldr	r6, [r6, #4]
 8004318:	e7b4      	b.n	8004284 <_malloc_r+0x4c>
 800431a:	4613      	mov	r3, r2
 800431c:	e7cc      	b.n	80042b8 <_malloc_r+0x80>
 800431e:	230c      	movs	r3, #12
 8004320:	603b      	str	r3, [r7, #0]
 8004322:	4638      	mov	r0, r7
 8004324:	f000 f80e 	bl	8004344 <__malloc_unlock>
 8004328:	e797      	b.n	800425a <_malloc_r+0x22>
 800432a:	6025      	str	r5, [r4, #0]
 800432c:	e7dc      	b.n	80042e8 <_malloc_r+0xb0>
 800432e:	605b      	str	r3, [r3, #4]
 8004330:	deff      	udf	#255	; 0xff
 8004332:	bf00      	nop
 8004334:	200002ac 	.word	0x200002ac

08004338 <__malloc_lock>:
 8004338:	4801      	ldr	r0, [pc, #4]	; (8004340 <__malloc_lock+0x8>)
 800433a:	f7ff bf0f 	b.w	800415c <__retarget_lock_acquire_recursive>
 800433e:	bf00      	nop
 8004340:	200002a8 	.word	0x200002a8

08004344 <__malloc_unlock>:
 8004344:	4801      	ldr	r0, [pc, #4]	; (800434c <__malloc_unlock+0x8>)
 8004346:	f7ff bf0a 	b.w	800415e <__retarget_lock_release_recursive>
 800434a:	bf00      	nop
 800434c:	200002a8 	.word	0x200002a8

08004350 <__sfputc_r>:
 8004350:	6893      	ldr	r3, [r2, #8]
 8004352:	3b01      	subs	r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	b410      	push	{r4}
 8004358:	6093      	str	r3, [r2, #8]
 800435a:	da08      	bge.n	800436e <__sfputc_r+0x1e>
 800435c:	6994      	ldr	r4, [r2, #24]
 800435e:	42a3      	cmp	r3, r4
 8004360:	db01      	blt.n	8004366 <__sfputc_r+0x16>
 8004362:	290a      	cmp	r1, #10
 8004364:	d103      	bne.n	800436e <__sfputc_r+0x1e>
 8004366:	f85d 4b04 	ldr.w	r4, [sp], #4
 800436a:	f7ff bdea 	b.w	8003f42 <__swbuf_r>
 800436e:	6813      	ldr	r3, [r2, #0]
 8004370:	1c58      	adds	r0, r3, #1
 8004372:	6010      	str	r0, [r2, #0]
 8004374:	7019      	strb	r1, [r3, #0]
 8004376:	4608      	mov	r0, r1
 8004378:	f85d 4b04 	ldr.w	r4, [sp], #4
 800437c:	4770      	bx	lr

0800437e <__sfputs_r>:
 800437e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004380:	4606      	mov	r6, r0
 8004382:	460f      	mov	r7, r1
 8004384:	4614      	mov	r4, r2
 8004386:	18d5      	adds	r5, r2, r3
 8004388:	42ac      	cmp	r4, r5
 800438a:	d101      	bne.n	8004390 <__sfputs_r+0x12>
 800438c:	2000      	movs	r0, #0
 800438e:	e007      	b.n	80043a0 <__sfputs_r+0x22>
 8004390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004394:	463a      	mov	r2, r7
 8004396:	4630      	mov	r0, r6
 8004398:	f7ff ffda 	bl	8004350 <__sfputc_r>
 800439c:	1c43      	adds	r3, r0, #1
 800439e:	d1f3      	bne.n	8004388 <__sfputs_r+0xa>
 80043a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043a4 <_vfiprintf_r>:
 80043a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a8:	460d      	mov	r5, r1
 80043aa:	b09d      	sub	sp, #116	; 0x74
 80043ac:	4614      	mov	r4, r2
 80043ae:	4698      	mov	r8, r3
 80043b0:	4606      	mov	r6, r0
 80043b2:	b118      	cbz	r0, 80043bc <_vfiprintf_r+0x18>
 80043b4:	6a03      	ldr	r3, [r0, #32]
 80043b6:	b90b      	cbnz	r3, 80043bc <_vfiprintf_r+0x18>
 80043b8:	f7ff fcdc 	bl	8003d74 <__sinit>
 80043bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043be:	07d9      	lsls	r1, r3, #31
 80043c0:	d405      	bmi.n	80043ce <_vfiprintf_r+0x2a>
 80043c2:	89ab      	ldrh	r3, [r5, #12]
 80043c4:	059a      	lsls	r2, r3, #22
 80043c6:	d402      	bmi.n	80043ce <_vfiprintf_r+0x2a>
 80043c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043ca:	f7ff fec7 	bl	800415c <__retarget_lock_acquire_recursive>
 80043ce:	89ab      	ldrh	r3, [r5, #12]
 80043d0:	071b      	lsls	r3, r3, #28
 80043d2:	d501      	bpl.n	80043d8 <_vfiprintf_r+0x34>
 80043d4:	692b      	ldr	r3, [r5, #16]
 80043d6:	b99b      	cbnz	r3, 8004400 <_vfiprintf_r+0x5c>
 80043d8:	4629      	mov	r1, r5
 80043da:	4630      	mov	r0, r6
 80043dc:	f7ff fdee 	bl	8003fbc <__swsetup_r>
 80043e0:	b170      	cbz	r0, 8004400 <_vfiprintf_r+0x5c>
 80043e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043e4:	07dc      	lsls	r4, r3, #31
 80043e6:	d504      	bpl.n	80043f2 <_vfiprintf_r+0x4e>
 80043e8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ec:	b01d      	add	sp, #116	; 0x74
 80043ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f2:	89ab      	ldrh	r3, [r5, #12]
 80043f4:	0598      	lsls	r0, r3, #22
 80043f6:	d4f7      	bmi.n	80043e8 <_vfiprintf_r+0x44>
 80043f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043fa:	f7ff feb0 	bl	800415e <__retarget_lock_release_recursive>
 80043fe:	e7f3      	b.n	80043e8 <_vfiprintf_r+0x44>
 8004400:	2300      	movs	r3, #0
 8004402:	9309      	str	r3, [sp, #36]	; 0x24
 8004404:	2320      	movs	r3, #32
 8004406:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800440a:	f8cd 800c 	str.w	r8, [sp, #12]
 800440e:	2330      	movs	r3, #48	; 0x30
 8004410:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80045c4 <_vfiprintf_r+0x220>
 8004414:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004418:	f04f 0901 	mov.w	r9, #1
 800441c:	4623      	mov	r3, r4
 800441e:	469a      	mov	sl, r3
 8004420:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004424:	b10a      	cbz	r2, 800442a <_vfiprintf_r+0x86>
 8004426:	2a25      	cmp	r2, #37	; 0x25
 8004428:	d1f9      	bne.n	800441e <_vfiprintf_r+0x7a>
 800442a:	ebba 0b04 	subs.w	fp, sl, r4
 800442e:	d00b      	beq.n	8004448 <_vfiprintf_r+0xa4>
 8004430:	465b      	mov	r3, fp
 8004432:	4622      	mov	r2, r4
 8004434:	4629      	mov	r1, r5
 8004436:	4630      	mov	r0, r6
 8004438:	f7ff ffa1 	bl	800437e <__sfputs_r>
 800443c:	3001      	adds	r0, #1
 800443e:	f000 80a9 	beq.w	8004594 <_vfiprintf_r+0x1f0>
 8004442:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004444:	445a      	add	r2, fp
 8004446:	9209      	str	r2, [sp, #36]	; 0x24
 8004448:	f89a 3000 	ldrb.w	r3, [sl]
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 80a1 	beq.w	8004594 <_vfiprintf_r+0x1f0>
 8004452:	2300      	movs	r3, #0
 8004454:	f04f 32ff 	mov.w	r2, #4294967295
 8004458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800445c:	f10a 0a01 	add.w	sl, sl, #1
 8004460:	9304      	str	r3, [sp, #16]
 8004462:	9307      	str	r3, [sp, #28]
 8004464:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004468:	931a      	str	r3, [sp, #104]	; 0x68
 800446a:	4654      	mov	r4, sl
 800446c:	2205      	movs	r2, #5
 800446e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004472:	4854      	ldr	r0, [pc, #336]	; (80045c4 <_vfiprintf_r+0x220>)
 8004474:	f7fb feac 	bl	80001d0 <memchr>
 8004478:	9a04      	ldr	r2, [sp, #16]
 800447a:	b9d8      	cbnz	r0, 80044b4 <_vfiprintf_r+0x110>
 800447c:	06d1      	lsls	r1, r2, #27
 800447e:	bf44      	itt	mi
 8004480:	2320      	movmi	r3, #32
 8004482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004486:	0713      	lsls	r3, r2, #28
 8004488:	bf44      	itt	mi
 800448a:	232b      	movmi	r3, #43	; 0x2b
 800448c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004490:	f89a 3000 	ldrb.w	r3, [sl]
 8004494:	2b2a      	cmp	r3, #42	; 0x2a
 8004496:	d015      	beq.n	80044c4 <_vfiprintf_r+0x120>
 8004498:	9a07      	ldr	r2, [sp, #28]
 800449a:	4654      	mov	r4, sl
 800449c:	2000      	movs	r0, #0
 800449e:	f04f 0c0a 	mov.w	ip, #10
 80044a2:	4621      	mov	r1, r4
 80044a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044a8:	3b30      	subs	r3, #48	; 0x30
 80044aa:	2b09      	cmp	r3, #9
 80044ac:	d94d      	bls.n	800454a <_vfiprintf_r+0x1a6>
 80044ae:	b1b0      	cbz	r0, 80044de <_vfiprintf_r+0x13a>
 80044b0:	9207      	str	r2, [sp, #28]
 80044b2:	e014      	b.n	80044de <_vfiprintf_r+0x13a>
 80044b4:	eba0 0308 	sub.w	r3, r0, r8
 80044b8:	fa09 f303 	lsl.w	r3, r9, r3
 80044bc:	4313      	orrs	r3, r2
 80044be:	9304      	str	r3, [sp, #16]
 80044c0:	46a2      	mov	sl, r4
 80044c2:	e7d2      	b.n	800446a <_vfiprintf_r+0xc6>
 80044c4:	9b03      	ldr	r3, [sp, #12]
 80044c6:	1d19      	adds	r1, r3, #4
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	9103      	str	r1, [sp, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	bfbb      	ittet	lt
 80044d0:	425b      	neglt	r3, r3
 80044d2:	f042 0202 	orrlt.w	r2, r2, #2
 80044d6:	9307      	strge	r3, [sp, #28]
 80044d8:	9307      	strlt	r3, [sp, #28]
 80044da:	bfb8      	it	lt
 80044dc:	9204      	strlt	r2, [sp, #16]
 80044de:	7823      	ldrb	r3, [r4, #0]
 80044e0:	2b2e      	cmp	r3, #46	; 0x2e
 80044e2:	d10c      	bne.n	80044fe <_vfiprintf_r+0x15a>
 80044e4:	7863      	ldrb	r3, [r4, #1]
 80044e6:	2b2a      	cmp	r3, #42	; 0x2a
 80044e8:	d134      	bne.n	8004554 <_vfiprintf_r+0x1b0>
 80044ea:	9b03      	ldr	r3, [sp, #12]
 80044ec:	1d1a      	adds	r2, r3, #4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	9203      	str	r2, [sp, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bfb8      	it	lt
 80044f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80044fa:	3402      	adds	r4, #2
 80044fc:	9305      	str	r3, [sp, #20]
 80044fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80045d4 <_vfiprintf_r+0x230>
 8004502:	7821      	ldrb	r1, [r4, #0]
 8004504:	2203      	movs	r2, #3
 8004506:	4650      	mov	r0, sl
 8004508:	f7fb fe62 	bl	80001d0 <memchr>
 800450c:	b138      	cbz	r0, 800451e <_vfiprintf_r+0x17a>
 800450e:	9b04      	ldr	r3, [sp, #16]
 8004510:	eba0 000a 	sub.w	r0, r0, sl
 8004514:	2240      	movs	r2, #64	; 0x40
 8004516:	4082      	lsls	r2, r0
 8004518:	4313      	orrs	r3, r2
 800451a:	3401      	adds	r4, #1
 800451c:	9304      	str	r3, [sp, #16]
 800451e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004522:	4829      	ldr	r0, [pc, #164]	; (80045c8 <_vfiprintf_r+0x224>)
 8004524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004528:	2206      	movs	r2, #6
 800452a:	f7fb fe51 	bl	80001d0 <memchr>
 800452e:	2800      	cmp	r0, #0
 8004530:	d03f      	beq.n	80045b2 <_vfiprintf_r+0x20e>
 8004532:	4b26      	ldr	r3, [pc, #152]	; (80045cc <_vfiprintf_r+0x228>)
 8004534:	bb1b      	cbnz	r3, 800457e <_vfiprintf_r+0x1da>
 8004536:	9b03      	ldr	r3, [sp, #12]
 8004538:	3307      	adds	r3, #7
 800453a:	f023 0307 	bic.w	r3, r3, #7
 800453e:	3308      	adds	r3, #8
 8004540:	9303      	str	r3, [sp, #12]
 8004542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004544:	443b      	add	r3, r7
 8004546:	9309      	str	r3, [sp, #36]	; 0x24
 8004548:	e768      	b.n	800441c <_vfiprintf_r+0x78>
 800454a:	fb0c 3202 	mla	r2, ip, r2, r3
 800454e:	460c      	mov	r4, r1
 8004550:	2001      	movs	r0, #1
 8004552:	e7a6      	b.n	80044a2 <_vfiprintf_r+0xfe>
 8004554:	2300      	movs	r3, #0
 8004556:	3401      	adds	r4, #1
 8004558:	9305      	str	r3, [sp, #20]
 800455a:	4619      	mov	r1, r3
 800455c:	f04f 0c0a 	mov.w	ip, #10
 8004560:	4620      	mov	r0, r4
 8004562:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004566:	3a30      	subs	r2, #48	; 0x30
 8004568:	2a09      	cmp	r2, #9
 800456a:	d903      	bls.n	8004574 <_vfiprintf_r+0x1d0>
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0c6      	beq.n	80044fe <_vfiprintf_r+0x15a>
 8004570:	9105      	str	r1, [sp, #20]
 8004572:	e7c4      	b.n	80044fe <_vfiprintf_r+0x15a>
 8004574:	fb0c 2101 	mla	r1, ip, r1, r2
 8004578:	4604      	mov	r4, r0
 800457a:	2301      	movs	r3, #1
 800457c:	e7f0      	b.n	8004560 <_vfiprintf_r+0x1bc>
 800457e:	ab03      	add	r3, sp, #12
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	462a      	mov	r2, r5
 8004584:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <_vfiprintf_r+0x22c>)
 8004586:	a904      	add	r1, sp, #16
 8004588:	4630      	mov	r0, r6
 800458a:	f3af 8000 	nop.w
 800458e:	4607      	mov	r7, r0
 8004590:	1c78      	adds	r0, r7, #1
 8004592:	d1d6      	bne.n	8004542 <_vfiprintf_r+0x19e>
 8004594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004596:	07d9      	lsls	r1, r3, #31
 8004598:	d405      	bmi.n	80045a6 <_vfiprintf_r+0x202>
 800459a:	89ab      	ldrh	r3, [r5, #12]
 800459c:	059a      	lsls	r2, r3, #22
 800459e:	d402      	bmi.n	80045a6 <_vfiprintf_r+0x202>
 80045a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045a2:	f7ff fddc 	bl	800415e <__retarget_lock_release_recursive>
 80045a6:	89ab      	ldrh	r3, [r5, #12]
 80045a8:	065b      	lsls	r3, r3, #25
 80045aa:	f53f af1d 	bmi.w	80043e8 <_vfiprintf_r+0x44>
 80045ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045b0:	e71c      	b.n	80043ec <_vfiprintf_r+0x48>
 80045b2:	ab03      	add	r3, sp, #12
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	462a      	mov	r2, r5
 80045b8:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <_vfiprintf_r+0x22c>)
 80045ba:	a904      	add	r1, sp, #16
 80045bc:	4630      	mov	r0, r6
 80045be:	f000 f879 	bl	80046b4 <_printf_i>
 80045c2:	e7e4      	b.n	800458e <_vfiprintf_r+0x1ea>
 80045c4:	08004ca0 	.word	0x08004ca0
 80045c8:	08004caa 	.word	0x08004caa
 80045cc:	00000000 	.word	0x00000000
 80045d0:	0800437f 	.word	0x0800437f
 80045d4:	08004ca6 	.word	0x08004ca6

080045d8 <_printf_common>:
 80045d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045dc:	4616      	mov	r6, r2
 80045de:	4699      	mov	r9, r3
 80045e0:	688a      	ldr	r2, [r1, #8]
 80045e2:	690b      	ldr	r3, [r1, #16]
 80045e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045e8:	4293      	cmp	r3, r2
 80045ea:	bfb8      	it	lt
 80045ec:	4613      	movlt	r3, r2
 80045ee:	6033      	str	r3, [r6, #0]
 80045f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045f4:	4607      	mov	r7, r0
 80045f6:	460c      	mov	r4, r1
 80045f8:	b10a      	cbz	r2, 80045fe <_printf_common+0x26>
 80045fa:	3301      	adds	r3, #1
 80045fc:	6033      	str	r3, [r6, #0]
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	0699      	lsls	r1, r3, #26
 8004602:	bf42      	ittt	mi
 8004604:	6833      	ldrmi	r3, [r6, #0]
 8004606:	3302      	addmi	r3, #2
 8004608:	6033      	strmi	r3, [r6, #0]
 800460a:	6825      	ldr	r5, [r4, #0]
 800460c:	f015 0506 	ands.w	r5, r5, #6
 8004610:	d106      	bne.n	8004620 <_printf_common+0x48>
 8004612:	f104 0a19 	add.w	sl, r4, #25
 8004616:	68e3      	ldr	r3, [r4, #12]
 8004618:	6832      	ldr	r2, [r6, #0]
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	42ab      	cmp	r3, r5
 800461e:	dc26      	bgt.n	800466e <_printf_common+0x96>
 8004620:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004624:	1e13      	subs	r3, r2, #0
 8004626:	6822      	ldr	r2, [r4, #0]
 8004628:	bf18      	it	ne
 800462a:	2301      	movne	r3, #1
 800462c:	0692      	lsls	r2, r2, #26
 800462e:	d42b      	bmi.n	8004688 <_printf_common+0xb0>
 8004630:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004634:	4649      	mov	r1, r9
 8004636:	4638      	mov	r0, r7
 8004638:	47c0      	blx	r8
 800463a:	3001      	adds	r0, #1
 800463c:	d01e      	beq.n	800467c <_printf_common+0xa4>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	6922      	ldr	r2, [r4, #16]
 8004642:	f003 0306 	and.w	r3, r3, #6
 8004646:	2b04      	cmp	r3, #4
 8004648:	bf02      	ittt	eq
 800464a:	68e5      	ldreq	r5, [r4, #12]
 800464c:	6833      	ldreq	r3, [r6, #0]
 800464e:	1aed      	subeq	r5, r5, r3
 8004650:	68a3      	ldr	r3, [r4, #8]
 8004652:	bf0c      	ite	eq
 8004654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004658:	2500      	movne	r5, #0
 800465a:	4293      	cmp	r3, r2
 800465c:	bfc4      	itt	gt
 800465e:	1a9b      	subgt	r3, r3, r2
 8004660:	18ed      	addgt	r5, r5, r3
 8004662:	2600      	movs	r6, #0
 8004664:	341a      	adds	r4, #26
 8004666:	42b5      	cmp	r5, r6
 8004668:	d11a      	bne.n	80046a0 <_printf_common+0xc8>
 800466a:	2000      	movs	r0, #0
 800466c:	e008      	b.n	8004680 <_printf_common+0xa8>
 800466e:	2301      	movs	r3, #1
 8004670:	4652      	mov	r2, sl
 8004672:	4649      	mov	r1, r9
 8004674:	4638      	mov	r0, r7
 8004676:	47c0      	blx	r8
 8004678:	3001      	adds	r0, #1
 800467a:	d103      	bne.n	8004684 <_printf_common+0xac>
 800467c:	f04f 30ff 	mov.w	r0, #4294967295
 8004680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004684:	3501      	adds	r5, #1
 8004686:	e7c6      	b.n	8004616 <_printf_common+0x3e>
 8004688:	18e1      	adds	r1, r4, r3
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	2030      	movs	r0, #48	; 0x30
 800468e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004692:	4422      	add	r2, r4
 8004694:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004698:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800469c:	3302      	adds	r3, #2
 800469e:	e7c7      	b.n	8004630 <_printf_common+0x58>
 80046a0:	2301      	movs	r3, #1
 80046a2:	4622      	mov	r2, r4
 80046a4:	4649      	mov	r1, r9
 80046a6:	4638      	mov	r0, r7
 80046a8:	47c0      	blx	r8
 80046aa:	3001      	adds	r0, #1
 80046ac:	d0e6      	beq.n	800467c <_printf_common+0xa4>
 80046ae:	3601      	adds	r6, #1
 80046b0:	e7d9      	b.n	8004666 <_printf_common+0x8e>
	...

080046b4 <_printf_i>:
 80046b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046b8:	7e0f      	ldrb	r7, [r1, #24]
 80046ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046bc:	2f78      	cmp	r7, #120	; 0x78
 80046be:	4691      	mov	r9, r2
 80046c0:	4680      	mov	r8, r0
 80046c2:	460c      	mov	r4, r1
 80046c4:	469a      	mov	sl, r3
 80046c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046ca:	d807      	bhi.n	80046dc <_printf_i+0x28>
 80046cc:	2f62      	cmp	r7, #98	; 0x62
 80046ce:	d80a      	bhi.n	80046e6 <_printf_i+0x32>
 80046d0:	2f00      	cmp	r7, #0
 80046d2:	f000 80d4 	beq.w	800487e <_printf_i+0x1ca>
 80046d6:	2f58      	cmp	r7, #88	; 0x58
 80046d8:	f000 80c0 	beq.w	800485c <_printf_i+0x1a8>
 80046dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046e4:	e03a      	b.n	800475c <_printf_i+0xa8>
 80046e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046ea:	2b15      	cmp	r3, #21
 80046ec:	d8f6      	bhi.n	80046dc <_printf_i+0x28>
 80046ee:	a101      	add	r1, pc, #4	; (adr r1, 80046f4 <_printf_i+0x40>)
 80046f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046f4:	0800474d 	.word	0x0800474d
 80046f8:	08004761 	.word	0x08004761
 80046fc:	080046dd 	.word	0x080046dd
 8004700:	080046dd 	.word	0x080046dd
 8004704:	080046dd 	.word	0x080046dd
 8004708:	080046dd 	.word	0x080046dd
 800470c:	08004761 	.word	0x08004761
 8004710:	080046dd 	.word	0x080046dd
 8004714:	080046dd 	.word	0x080046dd
 8004718:	080046dd 	.word	0x080046dd
 800471c:	080046dd 	.word	0x080046dd
 8004720:	08004865 	.word	0x08004865
 8004724:	0800478d 	.word	0x0800478d
 8004728:	0800481f 	.word	0x0800481f
 800472c:	080046dd 	.word	0x080046dd
 8004730:	080046dd 	.word	0x080046dd
 8004734:	08004887 	.word	0x08004887
 8004738:	080046dd 	.word	0x080046dd
 800473c:	0800478d 	.word	0x0800478d
 8004740:	080046dd 	.word	0x080046dd
 8004744:	080046dd 	.word	0x080046dd
 8004748:	08004827 	.word	0x08004827
 800474c:	682b      	ldr	r3, [r5, #0]
 800474e:	1d1a      	adds	r2, r3, #4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	602a      	str	r2, [r5, #0]
 8004754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800475c:	2301      	movs	r3, #1
 800475e:	e09f      	b.n	80048a0 <_printf_i+0x1ec>
 8004760:	6820      	ldr	r0, [r4, #0]
 8004762:	682b      	ldr	r3, [r5, #0]
 8004764:	0607      	lsls	r7, r0, #24
 8004766:	f103 0104 	add.w	r1, r3, #4
 800476a:	6029      	str	r1, [r5, #0]
 800476c:	d501      	bpl.n	8004772 <_printf_i+0xbe>
 800476e:	681e      	ldr	r6, [r3, #0]
 8004770:	e003      	b.n	800477a <_printf_i+0xc6>
 8004772:	0646      	lsls	r6, r0, #25
 8004774:	d5fb      	bpl.n	800476e <_printf_i+0xba>
 8004776:	f9b3 6000 	ldrsh.w	r6, [r3]
 800477a:	2e00      	cmp	r6, #0
 800477c:	da03      	bge.n	8004786 <_printf_i+0xd2>
 800477e:	232d      	movs	r3, #45	; 0x2d
 8004780:	4276      	negs	r6, r6
 8004782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004786:	485a      	ldr	r0, [pc, #360]	; (80048f0 <_printf_i+0x23c>)
 8004788:	230a      	movs	r3, #10
 800478a:	e012      	b.n	80047b2 <_printf_i+0xfe>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	6820      	ldr	r0, [r4, #0]
 8004790:	1d19      	adds	r1, r3, #4
 8004792:	6029      	str	r1, [r5, #0]
 8004794:	0605      	lsls	r5, r0, #24
 8004796:	d501      	bpl.n	800479c <_printf_i+0xe8>
 8004798:	681e      	ldr	r6, [r3, #0]
 800479a:	e002      	b.n	80047a2 <_printf_i+0xee>
 800479c:	0641      	lsls	r1, r0, #25
 800479e:	d5fb      	bpl.n	8004798 <_printf_i+0xe4>
 80047a0:	881e      	ldrh	r6, [r3, #0]
 80047a2:	4853      	ldr	r0, [pc, #332]	; (80048f0 <_printf_i+0x23c>)
 80047a4:	2f6f      	cmp	r7, #111	; 0x6f
 80047a6:	bf0c      	ite	eq
 80047a8:	2308      	moveq	r3, #8
 80047aa:	230a      	movne	r3, #10
 80047ac:	2100      	movs	r1, #0
 80047ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047b2:	6865      	ldr	r5, [r4, #4]
 80047b4:	60a5      	str	r5, [r4, #8]
 80047b6:	2d00      	cmp	r5, #0
 80047b8:	bfa2      	ittt	ge
 80047ba:	6821      	ldrge	r1, [r4, #0]
 80047bc:	f021 0104 	bicge.w	r1, r1, #4
 80047c0:	6021      	strge	r1, [r4, #0]
 80047c2:	b90e      	cbnz	r6, 80047c8 <_printf_i+0x114>
 80047c4:	2d00      	cmp	r5, #0
 80047c6:	d04b      	beq.n	8004860 <_printf_i+0x1ac>
 80047c8:	4615      	mov	r5, r2
 80047ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80047ce:	fb03 6711 	mls	r7, r3, r1, r6
 80047d2:	5dc7      	ldrb	r7, [r0, r7]
 80047d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047d8:	4637      	mov	r7, r6
 80047da:	42bb      	cmp	r3, r7
 80047dc:	460e      	mov	r6, r1
 80047de:	d9f4      	bls.n	80047ca <_printf_i+0x116>
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d10b      	bne.n	80047fc <_printf_i+0x148>
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	07de      	lsls	r6, r3, #31
 80047e8:	d508      	bpl.n	80047fc <_printf_i+0x148>
 80047ea:	6923      	ldr	r3, [r4, #16]
 80047ec:	6861      	ldr	r1, [r4, #4]
 80047ee:	4299      	cmp	r1, r3
 80047f0:	bfde      	ittt	le
 80047f2:	2330      	movle	r3, #48	; 0x30
 80047f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047fc:	1b52      	subs	r2, r2, r5
 80047fe:	6122      	str	r2, [r4, #16]
 8004800:	f8cd a000 	str.w	sl, [sp]
 8004804:	464b      	mov	r3, r9
 8004806:	aa03      	add	r2, sp, #12
 8004808:	4621      	mov	r1, r4
 800480a:	4640      	mov	r0, r8
 800480c:	f7ff fee4 	bl	80045d8 <_printf_common>
 8004810:	3001      	adds	r0, #1
 8004812:	d14a      	bne.n	80048aa <_printf_i+0x1f6>
 8004814:	f04f 30ff 	mov.w	r0, #4294967295
 8004818:	b004      	add	sp, #16
 800481a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	f043 0320 	orr.w	r3, r3, #32
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	4833      	ldr	r0, [pc, #204]	; (80048f4 <_printf_i+0x240>)
 8004828:	2778      	movs	r7, #120	; 0x78
 800482a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	6829      	ldr	r1, [r5, #0]
 8004832:	061f      	lsls	r7, r3, #24
 8004834:	f851 6b04 	ldr.w	r6, [r1], #4
 8004838:	d402      	bmi.n	8004840 <_printf_i+0x18c>
 800483a:	065f      	lsls	r7, r3, #25
 800483c:	bf48      	it	mi
 800483e:	b2b6      	uxthmi	r6, r6
 8004840:	07df      	lsls	r7, r3, #31
 8004842:	bf48      	it	mi
 8004844:	f043 0320 	orrmi.w	r3, r3, #32
 8004848:	6029      	str	r1, [r5, #0]
 800484a:	bf48      	it	mi
 800484c:	6023      	strmi	r3, [r4, #0]
 800484e:	b91e      	cbnz	r6, 8004858 <_printf_i+0x1a4>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	f023 0320 	bic.w	r3, r3, #32
 8004856:	6023      	str	r3, [r4, #0]
 8004858:	2310      	movs	r3, #16
 800485a:	e7a7      	b.n	80047ac <_printf_i+0xf8>
 800485c:	4824      	ldr	r0, [pc, #144]	; (80048f0 <_printf_i+0x23c>)
 800485e:	e7e4      	b.n	800482a <_printf_i+0x176>
 8004860:	4615      	mov	r5, r2
 8004862:	e7bd      	b.n	80047e0 <_printf_i+0x12c>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	6826      	ldr	r6, [r4, #0]
 8004868:	6961      	ldr	r1, [r4, #20]
 800486a:	1d18      	adds	r0, r3, #4
 800486c:	6028      	str	r0, [r5, #0]
 800486e:	0635      	lsls	r5, r6, #24
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	d501      	bpl.n	8004878 <_printf_i+0x1c4>
 8004874:	6019      	str	r1, [r3, #0]
 8004876:	e002      	b.n	800487e <_printf_i+0x1ca>
 8004878:	0670      	lsls	r0, r6, #25
 800487a:	d5fb      	bpl.n	8004874 <_printf_i+0x1c0>
 800487c:	8019      	strh	r1, [r3, #0]
 800487e:	2300      	movs	r3, #0
 8004880:	6123      	str	r3, [r4, #16]
 8004882:	4615      	mov	r5, r2
 8004884:	e7bc      	b.n	8004800 <_printf_i+0x14c>
 8004886:	682b      	ldr	r3, [r5, #0]
 8004888:	1d1a      	adds	r2, r3, #4
 800488a:	602a      	str	r2, [r5, #0]
 800488c:	681d      	ldr	r5, [r3, #0]
 800488e:	6862      	ldr	r2, [r4, #4]
 8004890:	2100      	movs	r1, #0
 8004892:	4628      	mov	r0, r5
 8004894:	f7fb fc9c 	bl	80001d0 <memchr>
 8004898:	b108      	cbz	r0, 800489e <_printf_i+0x1ea>
 800489a:	1b40      	subs	r0, r0, r5
 800489c:	6060      	str	r0, [r4, #4]
 800489e:	6863      	ldr	r3, [r4, #4]
 80048a0:	6123      	str	r3, [r4, #16]
 80048a2:	2300      	movs	r3, #0
 80048a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048a8:	e7aa      	b.n	8004800 <_printf_i+0x14c>
 80048aa:	6923      	ldr	r3, [r4, #16]
 80048ac:	462a      	mov	r2, r5
 80048ae:	4649      	mov	r1, r9
 80048b0:	4640      	mov	r0, r8
 80048b2:	47d0      	blx	sl
 80048b4:	3001      	adds	r0, #1
 80048b6:	d0ad      	beq.n	8004814 <_printf_i+0x160>
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	079b      	lsls	r3, r3, #30
 80048bc:	d413      	bmi.n	80048e6 <_printf_i+0x232>
 80048be:	68e0      	ldr	r0, [r4, #12]
 80048c0:	9b03      	ldr	r3, [sp, #12]
 80048c2:	4298      	cmp	r0, r3
 80048c4:	bfb8      	it	lt
 80048c6:	4618      	movlt	r0, r3
 80048c8:	e7a6      	b.n	8004818 <_printf_i+0x164>
 80048ca:	2301      	movs	r3, #1
 80048cc:	4632      	mov	r2, r6
 80048ce:	4649      	mov	r1, r9
 80048d0:	4640      	mov	r0, r8
 80048d2:	47d0      	blx	sl
 80048d4:	3001      	adds	r0, #1
 80048d6:	d09d      	beq.n	8004814 <_printf_i+0x160>
 80048d8:	3501      	adds	r5, #1
 80048da:	68e3      	ldr	r3, [r4, #12]
 80048dc:	9903      	ldr	r1, [sp, #12]
 80048de:	1a5b      	subs	r3, r3, r1
 80048e0:	42ab      	cmp	r3, r5
 80048e2:	dcf2      	bgt.n	80048ca <_printf_i+0x216>
 80048e4:	e7eb      	b.n	80048be <_printf_i+0x20a>
 80048e6:	2500      	movs	r5, #0
 80048e8:	f104 0619 	add.w	r6, r4, #25
 80048ec:	e7f5      	b.n	80048da <_printf_i+0x226>
 80048ee:	bf00      	nop
 80048f0:	08004cb1 	.word	0x08004cb1
 80048f4:	08004cc2 	.word	0x08004cc2

080048f8 <__sflush_r>:
 80048f8:	898a      	ldrh	r2, [r1, #12]
 80048fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048fe:	4605      	mov	r5, r0
 8004900:	0710      	lsls	r0, r2, #28
 8004902:	460c      	mov	r4, r1
 8004904:	d458      	bmi.n	80049b8 <__sflush_r+0xc0>
 8004906:	684b      	ldr	r3, [r1, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	dc05      	bgt.n	8004918 <__sflush_r+0x20>
 800490c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	dc02      	bgt.n	8004918 <__sflush_r+0x20>
 8004912:	2000      	movs	r0, #0
 8004914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800491a:	2e00      	cmp	r6, #0
 800491c:	d0f9      	beq.n	8004912 <__sflush_r+0x1a>
 800491e:	2300      	movs	r3, #0
 8004920:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004924:	682f      	ldr	r7, [r5, #0]
 8004926:	6a21      	ldr	r1, [r4, #32]
 8004928:	602b      	str	r3, [r5, #0]
 800492a:	d032      	beq.n	8004992 <__sflush_r+0x9a>
 800492c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	075a      	lsls	r2, r3, #29
 8004932:	d505      	bpl.n	8004940 <__sflush_r+0x48>
 8004934:	6863      	ldr	r3, [r4, #4]
 8004936:	1ac0      	subs	r0, r0, r3
 8004938:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800493a:	b10b      	cbz	r3, 8004940 <__sflush_r+0x48>
 800493c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800493e:	1ac0      	subs	r0, r0, r3
 8004940:	2300      	movs	r3, #0
 8004942:	4602      	mov	r2, r0
 8004944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004946:	6a21      	ldr	r1, [r4, #32]
 8004948:	4628      	mov	r0, r5
 800494a:	47b0      	blx	r6
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	d106      	bne.n	8004960 <__sflush_r+0x68>
 8004952:	6829      	ldr	r1, [r5, #0]
 8004954:	291d      	cmp	r1, #29
 8004956:	d82b      	bhi.n	80049b0 <__sflush_r+0xb8>
 8004958:	4a29      	ldr	r2, [pc, #164]	; (8004a00 <__sflush_r+0x108>)
 800495a:	410a      	asrs	r2, r1
 800495c:	07d6      	lsls	r6, r2, #31
 800495e:	d427      	bmi.n	80049b0 <__sflush_r+0xb8>
 8004960:	2200      	movs	r2, #0
 8004962:	6062      	str	r2, [r4, #4]
 8004964:	04d9      	lsls	r1, r3, #19
 8004966:	6922      	ldr	r2, [r4, #16]
 8004968:	6022      	str	r2, [r4, #0]
 800496a:	d504      	bpl.n	8004976 <__sflush_r+0x7e>
 800496c:	1c42      	adds	r2, r0, #1
 800496e:	d101      	bne.n	8004974 <__sflush_r+0x7c>
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	b903      	cbnz	r3, 8004976 <__sflush_r+0x7e>
 8004974:	6560      	str	r0, [r4, #84]	; 0x54
 8004976:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004978:	602f      	str	r7, [r5, #0]
 800497a:	2900      	cmp	r1, #0
 800497c:	d0c9      	beq.n	8004912 <__sflush_r+0x1a>
 800497e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004982:	4299      	cmp	r1, r3
 8004984:	d002      	beq.n	800498c <__sflush_r+0x94>
 8004986:	4628      	mov	r0, r5
 8004988:	f7ff fbea 	bl	8004160 <_free_r>
 800498c:	2000      	movs	r0, #0
 800498e:	6360      	str	r0, [r4, #52]	; 0x34
 8004990:	e7c0      	b.n	8004914 <__sflush_r+0x1c>
 8004992:	2301      	movs	r3, #1
 8004994:	4628      	mov	r0, r5
 8004996:	47b0      	blx	r6
 8004998:	1c41      	adds	r1, r0, #1
 800499a:	d1c8      	bne.n	800492e <__sflush_r+0x36>
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0c5      	beq.n	800492e <__sflush_r+0x36>
 80049a2:	2b1d      	cmp	r3, #29
 80049a4:	d001      	beq.n	80049aa <__sflush_r+0xb2>
 80049a6:	2b16      	cmp	r3, #22
 80049a8:	d101      	bne.n	80049ae <__sflush_r+0xb6>
 80049aa:	602f      	str	r7, [r5, #0]
 80049ac:	e7b1      	b.n	8004912 <__sflush_r+0x1a>
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b4:	81a3      	strh	r3, [r4, #12]
 80049b6:	e7ad      	b.n	8004914 <__sflush_r+0x1c>
 80049b8:	690f      	ldr	r7, [r1, #16]
 80049ba:	2f00      	cmp	r7, #0
 80049bc:	d0a9      	beq.n	8004912 <__sflush_r+0x1a>
 80049be:	0793      	lsls	r3, r2, #30
 80049c0:	680e      	ldr	r6, [r1, #0]
 80049c2:	bf08      	it	eq
 80049c4:	694b      	ldreq	r3, [r1, #20]
 80049c6:	600f      	str	r7, [r1, #0]
 80049c8:	bf18      	it	ne
 80049ca:	2300      	movne	r3, #0
 80049cc:	eba6 0807 	sub.w	r8, r6, r7
 80049d0:	608b      	str	r3, [r1, #8]
 80049d2:	f1b8 0f00 	cmp.w	r8, #0
 80049d6:	dd9c      	ble.n	8004912 <__sflush_r+0x1a>
 80049d8:	6a21      	ldr	r1, [r4, #32]
 80049da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049dc:	4643      	mov	r3, r8
 80049de:	463a      	mov	r2, r7
 80049e0:	4628      	mov	r0, r5
 80049e2:	47b0      	blx	r6
 80049e4:	2800      	cmp	r0, #0
 80049e6:	dc06      	bgt.n	80049f6 <__sflush_r+0xfe>
 80049e8:	89a3      	ldrh	r3, [r4, #12]
 80049ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ee:	81a3      	strh	r3, [r4, #12]
 80049f0:	f04f 30ff 	mov.w	r0, #4294967295
 80049f4:	e78e      	b.n	8004914 <__sflush_r+0x1c>
 80049f6:	4407      	add	r7, r0
 80049f8:	eba8 0800 	sub.w	r8, r8, r0
 80049fc:	e7e9      	b.n	80049d2 <__sflush_r+0xda>
 80049fe:	bf00      	nop
 8004a00:	dfbffffe 	.word	0xdfbffffe

08004a04 <_fflush_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	690b      	ldr	r3, [r1, #16]
 8004a08:	4605      	mov	r5, r0
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	b913      	cbnz	r3, 8004a14 <_fflush_r+0x10>
 8004a0e:	2500      	movs	r5, #0
 8004a10:	4628      	mov	r0, r5
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	b118      	cbz	r0, 8004a1e <_fflush_r+0x1a>
 8004a16:	6a03      	ldr	r3, [r0, #32]
 8004a18:	b90b      	cbnz	r3, 8004a1e <_fflush_r+0x1a>
 8004a1a:	f7ff f9ab 	bl	8003d74 <__sinit>
 8004a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f3      	beq.n	8004a0e <_fflush_r+0xa>
 8004a26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a28:	07d0      	lsls	r0, r2, #31
 8004a2a:	d404      	bmi.n	8004a36 <_fflush_r+0x32>
 8004a2c:	0599      	lsls	r1, r3, #22
 8004a2e:	d402      	bmi.n	8004a36 <_fflush_r+0x32>
 8004a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a32:	f7ff fb93 	bl	800415c <__retarget_lock_acquire_recursive>
 8004a36:	4628      	mov	r0, r5
 8004a38:	4621      	mov	r1, r4
 8004a3a:	f7ff ff5d 	bl	80048f8 <__sflush_r>
 8004a3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a40:	07da      	lsls	r2, r3, #31
 8004a42:	4605      	mov	r5, r0
 8004a44:	d4e4      	bmi.n	8004a10 <_fflush_r+0xc>
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	059b      	lsls	r3, r3, #22
 8004a4a:	d4e1      	bmi.n	8004a10 <_fflush_r+0xc>
 8004a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a4e:	f7ff fb86 	bl	800415e <__retarget_lock_release_recursive>
 8004a52:	e7dd      	b.n	8004a10 <_fflush_r+0xc>

08004a54 <__swhatbuf_r>:
 8004a54:	b570      	push	{r4, r5, r6, lr}
 8004a56:	460c      	mov	r4, r1
 8004a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a5c:	2900      	cmp	r1, #0
 8004a5e:	b096      	sub	sp, #88	; 0x58
 8004a60:	4615      	mov	r5, r2
 8004a62:	461e      	mov	r6, r3
 8004a64:	da0d      	bge.n	8004a82 <__swhatbuf_r+0x2e>
 8004a66:	89a3      	ldrh	r3, [r4, #12]
 8004a68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a6c:	f04f 0100 	mov.w	r1, #0
 8004a70:	bf0c      	ite	eq
 8004a72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004a76:	2340      	movne	r3, #64	; 0x40
 8004a78:	2000      	movs	r0, #0
 8004a7a:	6031      	str	r1, [r6, #0]
 8004a7c:	602b      	str	r3, [r5, #0]
 8004a7e:	b016      	add	sp, #88	; 0x58
 8004a80:	bd70      	pop	{r4, r5, r6, pc}
 8004a82:	466a      	mov	r2, sp
 8004a84:	f000 f848 	bl	8004b18 <_fstat_r>
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	dbec      	blt.n	8004a66 <__swhatbuf_r+0x12>
 8004a8c:	9901      	ldr	r1, [sp, #4]
 8004a8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004a92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004a96:	4259      	negs	r1, r3
 8004a98:	4159      	adcs	r1, r3
 8004a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a9e:	e7eb      	b.n	8004a78 <__swhatbuf_r+0x24>

08004aa0 <__smakebuf_r>:
 8004aa0:	898b      	ldrh	r3, [r1, #12]
 8004aa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004aa4:	079d      	lsls	r5, r3, #30
 8004aa6:	4606      	mov	r6, r0
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	d507      	bpl.n	8004abc <__smakebuf_r+0x1c>
 8004aac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ab0:	6023      	str	r3, [r4, #0]
 8004ab2:	6123      	str	r3, [r4, #16]
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	6163      	str	r3, [r4, #20]
 8004ab8:	b002      	add	sp, #8
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
 8004abc:	ab01      	add	r3, sp, #4
 8004abe:	466a      	mov	r2, sp
 8004ac0:	f7ff ffc8 	bl	8004a54 <__swhatbuf_r>
 8004ac4:	9900      	ldr	r1, [sp, #0]
 8004ac6:	4605      	mov	r5, r0
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f7ff fbb5 	bl	8004238 <_malloc_r>
 8004ace:	b948      	cbnz	r0, 8004ae4 <__smakebuf_r+0x44>
 8004ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ad4:	059a      	lsls	r2, r3, #22
 8004ad6:	d4ef      	bmi.n	8004ab8 <__smakebuf_r+0x18>
 8004ad8:	f023 0303 	bic.w	r3, r3, #3
 8004adc:	f043 0302 	orr.w	r3, r3, #2
 8004ae0:	81a3      	strh	r3, [r4, #12]
 8004ae2:	e7e3      	b.n	8004aac <__smakebuf_r+0xc>
 8004ae4:	89a3      	ldrh	r3, [r4, #12]
 8004ae6:	6020      	str	r0, [r4, #0]
 8004ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aec:	81a3      	strh	r3, [r4, #12]
 8004aee:	9b00      	ldr	r3, [sp, #0]
 8004af0:	6163      	str	r3, [r4, #20]
 8004af2:	9b01      	ldr	r3, [sp, #4]
 8004af4:	6120      	str	r0, [r4, #16]
 8004af6:	b15b      	cbz	r3, 8004b10 <__smakebuf_r+0x70>
 8004af8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004afc:	4630      	mov	r0, r6
 8004afe:	f000 f81d 	bl	8004b3c <_isatty_r>
 8004b02:	b128      	cbz	r0, 8004b10 <__smakebuf_r+0x70>
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	f023 0303 	bic.w	r3, r3, #3
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	81a3      	strh	r3, [r4, #12]
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	431d      	orrs	r5, r3
 8004b14:	81a5      	strh	r5, [r4, #12]
 8004b16:	e7cf      	b.n	8004ab8 <__smakebuf_r+0x18>

08004b18 <_fstat_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	4d07      	ldr	r5, [pc, #28]	; (8004b38 <_fstat_r+0x20>)
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4604      	mov	r4, r0
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	602b      	str	r3, [r5, #0]
 8004b26:	f7fc f870 	bl	8000c0a <_fstat>
 8004b2a:	1c43      	adds	r3, r0, #1
 8004b2c:	d102      	bne.n	8004b34 <_fstat_r+0x1c>
 8004b2e:	682b      	ldr	r3, [r5, #0]
 8004b30:	b103      	cbz	r3, 8004b34 <_fstat_r+0x1c>
 8004b32:	6023      	str	r3, [r4, #0]
 8004b34:	bd38      	pop	{r3, r4, r5, pc}
 8004b36:	bf00      	nop
 8004b38:	200002a4 	.word	0x200002a4

08004b3c <_isatty_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4d06      	ldr	r5, [pc, #24]	; (8004b58 <_isatty_r+0x1c>)
 8004b40:	2300      	movs	r3, #0
 8004b42:	4604      	mov	r4, r0
 8004b44:	4608      	mov	r0, r1
 8004b46:	602b      	str	r3, [r5, #0]
 8004b48:	f7fc f86f 	bl	8000c2a <_isatty>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d102      	bne.n	8004b56 <_isatty_r+0x1a>
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	b103      	cbz	r3, 8004b56 <_isatty_r+0x1a>
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
 8004b58:	200002a4 	.word	0x200002a4

08004b5c <_sbrk_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	4d06      	ldr	r5, [pc, #24]	; (8004b78 <_sbrk_r+0x1c>)
 8004b60:	2300      	movs	r3, #0
 8004b62:	4604      	mov	r4, r0
 8004b64:	4608      	mov	r0, r1
 8004b66:	602b      	str	r3, [r5, #0]
 8004b68:	f7fc f878 	bl	8000c5c <_sbrk>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_sbrk_r+0x1a>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_sbrk_r+0x1a>
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	200002a4 	.word	0x200002a4

08004b7c <_init>:
 8004b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7e:	bf00      	nop
 8004b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b82:	bc08      	pop	{r3}
 8004b84:	469e      	mov	lr, r3
 8004b86:	4770      	bx	lr

08004b88 <_fini>:
 8004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8a:	bf00      	nop
 8004b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8e:	bc08      	pop	{r3}
 8004b90:	469e      	mov	lr, r3
 8004b92:	4770      	bx	lr
